{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/email/Email.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/email/Email.vue","mtime":1573138056000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EmailSidebar        from './EmailSidebar.vue'\nimport MailItem            from './MailItem.vue'\nimport EmailView           from './EmailView.vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport moduleEmail         from '@/store/email/moduleEmail.js'\n\nexport default {\n  data() {\n    return {\n      openMailId           : null,\n      selectedMails        : [],\n      isSidebarActive      : false,\n      showThread           : false,\n      clickNotClose        : true,\n      isEmailSidebarActive : true,\n      settings             : {\n        maxScrollbarLength : 60,\n        wheelSpeed         : 0.30,\n      },\n    }\n  },\n  watch: {\n    isSidebarActive(value) {\n      if (!value) this.showThread = false\n    },\n    mailFilter() {\n      this.selectedMails = []\n      this.$refs.mailListPS.$el.scrollTop = 0\n      this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter)\n      this.$store.dispatch(\"email/fetchEmails\", { filter: this.$route.params.filter })\n      this.toggleEmailSidebar()\n    },\n    windowWidth() {\n      this.setSidebarWidth()\n    }\n  },\n  computed: {\n    mailFilter() {\n      return this.$route.params.filter\n    },\n    emailTags() {\n      return this.$store.state.email.mailTags\n    },\n    searchQuery: {\n      get() {\n        return this.$store.state.email.mailSearchQuery\n      },\n      set(val) {\n        this.$store.dispatch('email/setEmailSearchQuery', val)\n      }\n    },\n    selectAllCheckBox: {\n      get() {\n        return this.selectedMails.length\n      },\n      set(value) {\n        value ? this.selectedMails = this.mails.map(mail => mail.id) : this.selectedMails = []\n      }\n    },\n    mails() {\n      return this.$store.getters['email/filteredMails']\n    },\n    selectAllIcon() {\n      return this.selectedMails.length == this.mails.length ? 'icon-check' : 'icon-minus'\n    },\n    isMailSelected() {\n      return (mailId) => this.selectedMails.indexOf(mailId) == -1 ? false : true\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth\n    }\n  },\n  methods: {\n    updateOpenMail(mailId) {\n      this.openMailId = mailId\n      this.isSidebarActive = true\n    },\n    addToSelectedMails(mailId) {\n      if (this.selectedMails.indexOf(mailId) === -1) this.selectedMails.push(mailId)\n    },\n    removeSelectedMail(mailId) {\n      const mailIndex = this.selectedMails.indexOf(mailId)\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1)\n    },\n    moveTo(to) {\n      const payload = { emailIds: this.selectedMails, to: to }\n      this.$store.dispatch('email/moveMailsTo', payload)\n        .catch((error) => { console.error(error) })\n      this.selectedMails = []\n    },\n    moveCurrentTo(to) {\n      this.selectedMails = [this.openMailId]\n      this.moveTo(to)\n    },\n    updateMarkUnread() {\n      const payload = { emailIds: this.selectedMails, unreadFlag: true }\n      this.$store.dispatch('email/setUnread', payload)\n      this.selectedMails = []\n    },\n    removeOpenMail() {\n      this.selectedMails = [this.openMailId]\n      this.moveTo('trashed')\n      this.isSidebarActive = false\n    },\n    toggleIsStarred() {\n      const payload = { mailId: this.currentMail.id, value: !this.currentMail.isStarred }\n      this.$store.dispatch('email/toggleIsMailStarred', payload)\n    },\n    nextMail() {\n      const currentMailIndex = this.mails.findIndex((mail) => mail.id == this.openMailId)\n      if (this.mails[currentMailIndex + 1]) this.openMailId = this.mails[currentMailIndex + 1].id\n    },\n    previousMail() {\n      const currentMailIndex = this.mails.findIndex((mail) => mail.id == this.openMailId)\n      if (this.mails[currentMailIndex - 1]) this.openMailId = this.mails[currentMailIndex - 1].id\n    },\n    updateSingleMarkUnread() {\n      this.selectedMails = [this.openMailId]\n      this.updateMarkUnread()\n      this.isSidebarActive = false\n    },\n    updateLabels(label) {\n      this.$store.dispatch('email/updateLabels', { mails: this.selectedMails, label: label })\n      this.selectedMails = []\n    },\n    closeMailViewSidebar() {\n      this.isSidebarActive = false\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isEmailSidebarActive = this.clickNotClose = false\n      } else {\n        this.isEmailSidebarActive = this.clickNotClose = true\n      }\n    },\n    toggleEmailSidebar(value = false) {\n      if (!value) {\n        this.closeMailViewSidebar()\n        if (this.clickNotClose) {\n          return\n        }\n      }\n      this.isEmailSidebarActive = value\n    },\n  },\n  components: {\n    MailItem,\n    EmailSidebar,\n    EmailView,\n    VuePerfectScrollbar\n  },\n  created() {\n    this.$store.registerModule('email', moduleEmail)\n    this.setSidebarWidth()\n\n    this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter)        // Update Mail Filter\n    this.$store.dispatch(\"email/fetchEmails\", { filter: this.$route.params.filter }) // Fetch Emails From API\n    this.$store.dispatch(\"email/fetchMeta\")                                          // Fetch Unread Mails\n    this.$store.dispatch(\"email/fetchTags\")                                          // Fetch Mail Tags\n  },\n  beforeDestroy: function() {\n    this.$store.unregisterModule('email')\n  },\n  mounted() {\n    this.$store.dispatch(\"email/setEmailSearchQuery\", \"\")\n  }\n}\n\n",null]}