{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/chat/ChatLog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/chat/ChatLog.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default{\n    props: {\n        userId: {\n            type: Number,\n            required: true,\n        }\n    },\n    computed: {\n        chatData() {\n            return this.$store.getters['chat/chatDataOfUser'](this.userId);\n        },\n        activeUserImg() {\n            return this.$store.state.AppActiveUser.photoURL;\n        },\n        senderImg() {\n            return (isSentByActiveUser) => {\n                if (isSentByActiveUser) return this.$store.state.AppActiveUser.photoURL\n                else return this.$store.getters['chat/contact'](this.userId).photoURL\n            }\n        },\n        hasSentPreviousMsg() {\n            return (last_sender, current_sender) => last_sender == current_sender\n        },\n    },\n    methods: {\n        isSameDay(time_to, time_from) {\n            const date_time_to = new Date(Date.parse(time_to))\n            const date_time_from = new Date(Date.parse(time_from));\n            return date_time_to.getFullYear() === date_time_from.getFullYear() &&\n                date_time_to.getMonth() === date_time_from.getMonth() &&\n                date_time_to.getDate() === date_time_from.getDate();\n        },\n        toDate(time) {\n            const locale = \"en-us\";\n            const date_obj = new Date(Date.parse(time));\n            const monthName= date_obj.toLocaleString(locale, {\n                month: 'short'\n            });\n            return date_obj.getDate() + ' '  + monthName;\n        },\n        scrollToBottom() {\n            this.$nextTick(() => {\n                this.$parent.$el.scrollTop = this.$parent.$el.scrollHeight\n            });\n        }\n    },\n    updated() {\n        this.scrollToBottom();\n    },\n    mounted() {\n        this.scrollToBottom();\n    }\n}\n",null]}