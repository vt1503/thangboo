{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/pages/trade/navbar/components/VerticalNavMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/pages/trade/navbar/components/VerticalNavMenu.vue","mtime":1649894645184},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\n//import VNavMenuGroup from './VerticalNavMenuGroup.vue'\n//import VNavMenuItem from './VerticalNavMenuItem.vue'\nimport ListMenuHandmade from './ListMenu.vue'\n\n//import Logo from \"../Logo.vue\"\n\nexport default {\n  name: 'v-nav-menu',\n  components: {\n    //VNavMenuGroup,\n    //VNavMenuItem,\n    ListMenuHandmade,\n    VuePerfectScrollbar,\n    //Logo\n  },\n  props: {\n    //logo:             { type: String },\n    openGroupHover:   { type: Boolean, default: false },\n    parent:           { type: String },\n    reduceNotRebound: { type: Boolean, default: true },\n    navMenuItems:     { type: Array,   required: true },\n    title:            { type: String },\n  },\n  data: () => ({\n    iSLogin: false,\n    clickNotClose       : false, // disable close navMenu on outside click\n    isMouseEnter        : false,\n    reduce              : false, // determines if navMenu is reduce - component property\n    showCloseButton     : true, // show close button in smaller devices\n    settings            : {      // perfectScrollbar settings\n      maxScrollbarLength: 60,\n      wheelSpeed        : 1,\n      swipeEasing       : true\n    },\n    showShadowBottom    : false,\n  }),\n  computed: {\n    isGroupActive() {\n      \n      return (item) => {\n        const path        = this.$route.fullPath\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\n        let open          = false\n        let func = (item) => {\n          if (item.submenu) {\n            item.submenu.forEach((item) => {\n              if (item.url && (path === item.url || routeParent === item.slug)) { open = true }\n              else if (item.submenu) { func(item) }\n            })\n          }\n        }\n        func(item)\n        return open\n      }\n    },\n    menuItemsUpdated() {\n      let clone = this.navMenuItems.slice()\n\n      for(let [index, item] of this.navMenuItems.entries()) {\n        if (item.header && item.items.length && (index || 1)) {\n          let i = clone.findIndex(ix => ix.header === item.header)\n          for(let [subIndex, subItem] of item.items.entries()) {\n            clone.splice(i + 1 + subIndex, 0, subItem)\n          }\n        }\n      }\n\n      return clone\n    },\n    isVerticalNavMenuActive: {\n      get()    { return this.$store.state.isVerticalNavMenuActive },\n      set(val) { this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val) }\n    },\n    layoutType() { return this.$store.state.mainLayoutType },\n    reduceButton: {\n      get()    { return this.$store.state.reduceButton },\n      set(val) { this.$store.commit('TOGGLE_REDUCE_BUTTON', val) }\n    },\n    isVerticalNavMenuReduced()   { return Boolean(this.reduce && this.reduceButton) },\n    verticalNavMenuItemsMin() { return this.$store.state.verticalNavMenuItemsMin },\n    windowWidth()     { return this.$store.state.windowWidth }\n  },\n  watch: {\n    '$route'() {\n      let token = localStorage.hasOwnProperty('tokenUser')\n      if(token){\n        this.iSLogin = true\n      }else{\n        this.iSLogin = false\n      }\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n    },\n    reduce(val) {\n      const verticalNavMenuWidth = val ? \"reduced\" : this.$store.state.windowWidth < 1200 ? \"no-nav-menu\" : \"default\"\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n\n      setTimeout(function() {\n        window.dispatchEvent(new Event('resize'))\n      }, 100)\n    },\n    layoutType()   { this.setVerticalNavMenuWidth() },\n    reduceButton() { this.setVerticalNavMenuWidth() },\n    windowWidth()  { this.setVerticalNavMenuWidth() }\n  },\n  methods: {\n    // handleWindowResize(event) {\n    //   this.windowWidth = event.currentTarget.innerWidth;\n    //   this.setVerticalNavMenuWidth()\n    // },\n    onSwipeLeft() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false\n    },\n    onSwipeAreaSwipeRight() {\n      if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true\n    },\n    psSectionScroll() {\n      this.showShadowBottom = this.$refs.verticalNavMenuPs.$el.scrollTop > 0 ? true : false\n    },\n    mouseEnter() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n      this.isMouseEnter = true\n    },\n    mouseLeave() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true)\n      this.isMouseEnter = false;\n    },\n    setVerticalNavMenuWidth() {\n\n      if(this.windowWidth > 1200) {\n        if(this.layoutType === 'vertical') {\n\n          // Set reduce\n          this.reduce = this.reduceButton ? true : false\n\n          // Open NavMenu\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n\n          // Set Menu Items Only Icon Mode\n          const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n          this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n\n          // Menu Action buttons\n          this.clickNotClose   = true\n          this.showCloseButton = false\n\n          const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n          this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n\n          return\n        }\n      }\n\n      // Close NavMenu\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n\n      // Reduce button\n      if (this.reduceButton) this.reduce = false\n\n      // Menu Action buttons\n      this.showCloseButton = true\n      this.clickNotClose   = false\n\n      // Update NavMenu Width\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n\n      // Remove Only Icon in Menu\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n\n\n\n      // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\n      // if (this.windowWidth < 1200) {\n\n      //   // Close NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n\n      //   // Reduce button\n      //   if (this.reduceButton) this.reduce = false\n\n      //   // Menu Action buttons\n      //   this.showCloseButton = true\n      //   this.clickNotClose   = false\n\n      //   // Update NavMenu Width\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n\n      //   // Remove Only Icon in Menu\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n\n      // } else {\n\n      //   // Set reduce\n      //   this.reduce = this.reduceButton ? true : false\n\n      //   // Open NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n\n      //   // Set Menu Items Only Icon Mode\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n\n      //   // Menu Action buttons\n      //   this.clickNotClose   = true\n      //   this.showCloseButton = false\n\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n      // }\n    },\n    toggleReduce(val) {\n      this.reduceButton = val\n      this.setVerticalNavMenuWidth()\n    },\n  },\n  mounted() {\n    this.setVerticalNavMenuWidth()\n  },\n}\n\n",null]}