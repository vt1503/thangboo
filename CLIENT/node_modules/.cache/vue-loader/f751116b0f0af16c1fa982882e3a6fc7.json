{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/pages/trade/navbar/components/HorizontalNavMenuGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/pages/trade/navbar/components/HorizontalNavMenuGroup.vue","mtime":1649894645181},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// import VNavMenuItem from './VerticalNavMenuItem.vue'\r\nimport HNavMenuItem from \"./HorizontalNavMenuItem.vue\"\r\n\r\nexport default {\r\n  name  : 'h-nav-menu-group',\r\n  props : {\r\n    openHover  : { type: Boolean, default: true },\r\n    open       : { type: Boolean, default: false },\r\n    group      : { type: Object },\r\n    groupIndex : { type: Number },\r\n    bottom     : { type: Boolean, default: false }\r\n  },\r\n  components: {\r\n    HNavMenuItem\r\n  },\r\n  data: () => ({\r\n    openItems : false,\r\n    hovered: false,\r\n    dropLeft: false,\r\n  }),\r\n  computed: {\r\n    iconClasses() {\r\n      let classes = \"mr-3 \"\r\n      classes += this.groupIndex % 1 != 0 ? 'w-3 h-3' : 'w-5 h-5'\r\n      return classes\r\n    },\r\n    styleItems() {\r\n      let style = {}\r\n      if(this.bottom) {\r\n        style.top = \"100%\"\r\n        style.left = \"0\"\r\n      }else {\r\n        style.top = \"12px\"\r\n        style.left = \"100%\"\r\n      }\r\n\r\n      if(this.dropLeft) {\r\n        style.left = null\r\n        style.right = \"100%\"\r\n      }\r\n\r\n      if(this.$vs.rtl) {\r\n        let temp = style.left\r\n        style.left = style.right\r\n        style.right = temp\r\n      }\r\n\r\n      return style\r\n    },\r\n    itemIcon() {\r\n      // return (index) => {\r\n      //   // if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\r\n      // }\r\n      return \"CircleIcon\"\r\n    },\r\n    isGroupActive() {\r\n      return (item) => {\r\n        const path        = this.$route.fullPath\r\n        let open          = false\r\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n\r\n        let func = (item) => {\r\n          if (item.submenu) {\r\n            item.submenu.forEach((item) => {\r\n              if ((path == item.url || routeParent == item.slug) && item.url) { open = true}\r\n              else if (item.submenu) { func(item) }\r\n            })\r\n          }\r\n        }\r\n\r\n        func(item)\r\n        return open\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    hovered(val) {\r\n      this.$nextTick(() => {\r\n        if(val) {\r\n          let dd = this.$refs.childDropdown\r\n\r\n          if(((window.innerHeight - dd.getBoundingClientRect().top) - dd.getBoundingClientRect().height - 28) < 1) {\r\n            const maxHeight = (window.innerHeight - dd.getBoundingClientRect().top - 70)\r\n            dd.style.maxHeight = `${maxHeight}px`\r\n            dd.style.overflowY = \"auto\"\r\n            dd.style.overflowX = \"hidden\"\r\n          }\r\n\r\n          if(dd.getBoundingClientRect().left + dd.offsetWidth - (window.innerWidth - 16) >= 0 || this.$parent.dropLeft) {\r\n            this.dropLeft = true\r\n          }\r\n\r\n          if(this.$vs.rtl) {\r\n            if(dd.getBoundingClientRect().right - dd.offsetWidth - 16 < 0) {\r\n              this.dropLeft = true\r\n            }\r\n          }\r\n        }else {\r\n          this.dropLeft = false\r\n        }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    mouseover() {\r\n      this.hovered = true\r\n      if (this.openHover) {\r\n        this.showChildren()\r\n      }\r\n    },\r\n    mouseout() {\r\n      this.hovered = false\r\n      if (this.openHover) {\r\n        this.showChildren(false)\r\n      }\r\n    },\r\n    showChildren(val = true) {\r\n      this.openItems = val\r\n    }\r\n  },\r\n}\r\n\r\n",null]}