{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/todo/TodoTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/todo/TodoTask.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default{\n    props: {\n        taskId: {\n            type: Number,\n            required: true,\n        }\n    },\n    data() {\n        return {\n          taskLocal: this.$store.getters[\"todo/getTask\"](this.taskId)\n        }\n    },\n    computed: {\n        isCompleted: {\n          get () {\n              return this.taskLocal.isCompleted\n          },\n          set (value) {\n            this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {isCompleted: value}))\n              .then((response) => {\n                this.taskLocal.isCompleted = response.data.isCompleted\n              })\n              .catch((error) => { console.error(error) })\n          }\n        },\n        todoLabelColor() {\n          return (label) => {\n            const tags = this.$store.state.todo.taskTags\n            return tags.find((tag) => {\n              return tag.value == label\n            }).color\n          }\n        }\n    },\n    methods: {\n        toggleIsImportant() {\n          this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {isImportant: !this.taskLocal.isImportant}))\n            .then((response) => {\n              this.taskLocal.isImportant = response.data.isImportant\n            })\n            .catch((error) => { console.error(error) })\n        },\n        toggleIsStarred() {\n          this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {isStarred: !this.taskLocal.isStarred}))\n            .then((response) => {\n              this.taskLocal.isStarred = response.data.isStarred\n            })\n            .catch((error) => { console.error(error) })\n        },\n        moveToTrash() {\n\n          this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {isTrashed: true}))\n            .then((response) => {\n              // console.log(response.data);\n              this.taskLocal.isTrashed = response.data.isTrashed\n              this.$el.style.display = \"none\"   // Hides element from DOM\n            })\n            .catch((error) => { console.error(error) })\n\n          // Un-comment below line if you want to fetch task after task is deleted\n          // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\n        },\n        displayPrompt() {\n          this.$emit('showDisplayPrompt', this.taskId)\n        }\n    },\n}\n",null]}