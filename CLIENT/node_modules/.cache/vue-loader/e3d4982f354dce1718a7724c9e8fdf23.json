{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/chat/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/chat/Chat.vue","mtime":1571653082000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ChatContact         from \"./ChatContact.vue\"\nimport ChatLog             from './ChatLog.vue'\nimport ChatNavbar          from './ChatNavbar.vue'\nimport UserProfile         from \"./UserProfile.vue\"\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport moduleChat          from '@/store/chat/moduleChat.js'\n\nexport default {\n  data() {\n    return {\n      active               : true,\n      isHidden             : false,\n      searchContact        : \"\",\n      activeProfileSidebar : false,\n      activeChatUser       : null,\n      userProfileId        : -1,\n      typedMessage         : \"\",\n      isChatPinned         : false,\n      settings             : {\n        maxScrollbarLength : 60,\n        wheelSpeed         : 0.70,\n      },\n      clickNotClose        : true,\n      isChatSidebarActive  : true,\n      isLoggedInUserProfileView: false,\n    }\n  },\n  watch: {\n    windowWidth() {\n      this.setSidebarWidth()\n    }\n  },\n  computed: {\n    chatLastMessaged() {\n      return (userId) => this.$store.getters['chat/chatLastMessaged'](userId)\n    },\n    chatUnseenMessages() {\n      return (userId) => {\n        const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId)\n        if (unseenMsg) return unseenMsg\n      }\n    },\n    activeUser() {\n      return this.$store.state.AppActiveUser\n    },\n    getStatusColor() {\n      return (isActiveUser) => {\n        const userStatus = this.getUserStatus(isActiveUser)\n\n        if (userStatus == \"online\") {\n          return \"success\"\n        } else if (userStatus == \"do not disturb\") {\n          return \"danger\"\n        } else if (userStatus == \"away\") {\n          return \"warning\"\n        } else {\n          return \"grey\"\n        }\n      }\n    },\n    chatContacts() {\n      return this.$store.getters['chat/chatContacts']\n    },\n    contacts() {\n      return this.$store.getters['chat/contacts']\n    },\n    searchQuery: {\n      get() {\n        return this.$store.state.chat.chatSearchQuery\n      },\n      set(val) {\n        this.$store.dispatch('chat/setChatSearchQuery', val)\n      }\n    },\n    isActiveChatUser() {\n      return (userId) => userId == this.activeChatUser\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth\n    }\n  },\n  methods: {\n    getUserStatus(isActiveUser) {\n      // return \"active\"\n      return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status\n    },\n    closeProfileSidebar(value) {\n      this.activeProfileSidebar = value\n    },\n    updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId\n      if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n        this.$store.dispatch('chat/markSeenAllMessages', contactId)\n      }\n      let chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)\n      if (chatData) this.isChatPinned = chatData.isPinned\n      else this.isChatPinned = false\n      this.toggleChatSidebar()\n      this.typedMessage = ''\n    },\n    showProfileSidebar(userId, openOnLeft = false) {\n      this.userProfileId = userId\n      this.isLoggedInUserProfileView = openOnLeft\n      this.activeProfileSidebar = !this.activeProfileSidebar\n    },\n    sendMsg() {\n      if (!this.typedMessage) return\n      const payload = {\n        isPinned: this.isChatPinned,\n        'msg': {\n          'textContent' : this.typedMessage,\n          'time'        : String(new Date()),\n          'isSent'      : true,\n          'isSeen'      : false,\n        },\n        'id': this.activeChatUser\n      }\n      this.$store.dispatch('chat/sendChatMessage', payload)\n      this.typedMessage = ''\n      this.$refs.chatLogPS.$el.scrollTop = this.$refs.chatLog.scrollHeight\n    },\n    toggleIsChatPinned(value) {\n      this.isChatPinned = value\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true\n      }\n    },\n    toggleChatSidebar(value = false) {\n      if (!value && this.clickNotClose) return\n      this.isChatSidebarActive = value\n    }\n  },\n  components: {\n    VuePerfectScrollbar,\n    ChatContact,\n    UserProfile,\n    ChatNavbar,\n    ChatLog,\n  },\n  created() {\n    this.$store.registerModule('chat', moduleChat)\n    this.$store.dispatch('chat/fetchContacts')\n    this.$store.dispatch('chat/fetchChatContacts')\n    this.$store.dispatch('chat/fetchChats')\n    this.setSidebarWidth()\n  },\n  beforeDestroy: function() {\n    this.$store.unregisterModule('chat')\n  },\n  mounted() {\n    this.$store.dispatch(\"chat/setChatSearchQuery\", \"\")\n  }\n}\n\n",null]}