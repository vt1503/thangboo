{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/components/extra-components/tree/TreeSearchTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/components/extra-components/tree/TreeSearchTree.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\n\nexport default {\n  data() {\n    return {\n      searchword: '',\n      treeData: [{\n        title: 'node1',\n        expanded: true,\n        children: [{\n          title: 'node 1-1',\n          expanded: true,\n          children: [{\n            title: 'node 1-1-1'\n          }, {\n            title: 'node 1-1-2'\n          }, {\n            title: 'node 1-1-3'\n          }]\n        }, {\n          title: 'node 1-2',\n          children: [{\n            title: \"<span style='color: red'>node 1-2-1</span>\"\n          }, {\n            title: \"<span style='color: red'>node 1-2-2</span>\"\n          }]\n        }]\n      }]\n    }\n  },\n  methods: {\n    search () {\n      this.$refs.tree.searchNodes(this.searchword)\n    },\n    tpl (...args) {\n      let {0: node, 2: parent, 3: index} = args\n      let titleClass = node.selected ? 'node-title node-selected' : 'node-title'\n      if (node.searched) titleClass += ' node-searched'\n      return <span>\n        <span class=\"tree-expand\" onClick={() => this.$refs.tree.addNode(node, {title: 'sync node'})}>+</span>\n         <span class={titleClass} domPropsInnerHTML={node.title} onClick={() => {\n           this.$refs.tree.nodeSelected(node)\n         }}></span>\n      <button class=\"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\" onClick={() => this.asyncLoad(node)}>async</button>\n      <button class=\"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\" onClick={() => this.$refs.tree.delNode(node, parent, index)}>delete</button>\n      </span>\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, 'loading', true)\n      let pro = new Promise(resolve => {\n        setTimeout(resolve, 2000, ['async node1', 'async node2'])\n      })\n      this.$refs.tree.addNodes(node, await pro)\n      this.$set(node, 'loading', false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n",null]}