{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/history/ListHisRutTien.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/history/ListHisRutTien.vue","mtime":1639222662000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport vSelect from 'vue-select'\r\nimport AuthenticationService from '@/services/AuthenticationService'\r\nimport moment from 'moment'\r\nimport Vue from 'vue'\r\n\r\nexport default {\r\n  components: {\r\n    vSelect\r\n  },\r\n\r\n\r\n  data() {\r\n    return {\r\n        clickDone: false,\r\n        clickRefuseDone: false,\r\n      showDeleteMultiBt: true,\r\n      activePrompt: false,\r\n      selectedUser: [],\r\n      fileName: \"\",\r\n      formats:[\"xlsx\", \"csv\", \"txt\"],\r\n      cellAutoWidth: true,\r\n      selectedFormat: \"xlsx\",\r\n      headerTitle: [\"Tài khoản\", \"Loại\", \"Số Tiền\", \"Trạng Thái\", \"Ngày Nạp\" ],\r\n      headerVal: [\"account\", \"type\", \"amount\", \"status\", \"datecreate\" ],\r\n      productsFake: [\r\n            {\r\n              \"id\": 1,\r\n              \"from_u\": \"123\",\r\n              \"to_u\": \"5344\",\r\n              \"type_key\": \"nt\", \r\n              \"type\": \"Nạp tiền (Nội bộ)\",\r\n              \"currency\": \"sys\",\r\n              \"amount\": 100.00,\r\n              \"note\": \"\",\r\n              \"status\": 1,\r\n              \"created_at\": \"00:00:00 02-04-2021\"\r\n            },\r\n            {\r\n              \"id\": 2,\r\n              \"from_u\": \"123\",\r\n              \"to_u\": \"5344\",\r\n              \"type_key\": \"nt\", \r\n              \"type\": \"Nạp tiền (Nội bộ)\",\r\n              \"currency\": \"BTC\",\r\n              \"amount\": 100.00,\r\n              \"note\": \"ok nha\",\r\n              \"status\": 1,\r\n              \"created_at\": \"00:00:00 02-04-2021\"\r\n            },\r\n            {\r\n              \"id\": 3,\r\n              \"from_u\": \"123\",\r\n              \"to_u\": \"5344\",\r\n              \"type_key\": \"nt\", \r\n              \"type\": \"Nạp tiền (Nội bộ)\",\r\n              \"currency\": \"ETH\",\r\n              \"amount\": 100.00,\r\n              \"note\": \"\",\r\n              \"status\": 1,\r\n              \"created_at\": \"00:00:00 02-04-2021\"\r\n            },\r\n            {\r\n              \"id\": 5,\r\n              \"from_u\": \"123\",\r\n              \"to_u\": \"5344\",\r\n              \"type_key\": \"nt\", \r\n              \"type\": \"Nạp tiền (Nội bộ)\",\r\n              \"currency\": \"USDT\",\r\n              \"amount\": 100.00,\r\n              \"note\": \"\",\r\n              \"status\": 1,\r\n              \"created_at\": \"00:00:00 02-04-2021\"\r\n            }\r\n        ],\r\n      itemsPerPage: 10,\r\n      isMounted: false,\r\n      dtUSD: 0,\r\n      dtBNB: 0,\r\n      feeBNB: 0,\r\n    }\r\n  },\r\n  computed: {\r\n    currentPage() {\r\n      if(this.isMounted) {\r\n        return this.$refs.table.currentx\r\n      }\r\n      return 0\r\n    },\r\n    products() {\r\n      return this.productsFake\r\n    },\r\n    queriedItems() {\r\n      return this.$refs.table ? this.$refs.table.queriedResults.length : this.productsFake.length\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    deleteMultiple(){\r\n      let token = localStorage.getItem('token')\r\n      this.$store.dispatch('setToken', token)\r\n      \r\n      if(this.selectedUser.length == 0){\r\n        return this.$vs.notify({\r\n          text:'Hãy chọn đối tượng cần xóa',\r\n          color:'warning',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'});\r\n      }\r\n      for(var i = this.selectedUser.length - 1; i >= 0 ;i--){\r\n          let id = this.selectedUser[i]['id'];\r\n          let obj = {\r\n            id: id,\r\n            val: 1\r\n          }\r\n          AuthenticationService.deleteTrashByID(obj)\r\n          .then((resp) => {\r\n            if(!resp.data.success){\r\n              localStorage.removeItem('token');\r\n              this.$router.push('/pages/login').catch(() => {})\r\n            }\r\n          })\r\n          Vue.delete(this.productsFake, i)\r\n      }\r\n      this.selectedUser = []\r\n      return this.$vs.notify({\r\n          text:'Đã xóa thành công',\r\n          color:'success',\r\n          iconPack: 'feather',\r\n          icon:'icon-check'});\r\n    },\r\n\r\n    doneRefuseWithdra(id, index, amount, email, fee){\r\n        let obj = {\r\n            id: id,\r\n            amount: amount,\r\n            email: email,\r\n            fee: fee\r\n        }\r\n\r\n        AuthenticationService.doneRefuseWithDrawalByID(obj)\r\n        .then((resp) => {\r\n            let d = resp.data;\r\n            if(d.success == 1){\r\n              this.productsFake[index].status = 2;\r\n              return this.$vs.notify({\r\n                  text: 'Đã hoàn trả lại số tiền',\r\n                  color:'success',\r\n                  iconPack: 'feather',\r\n                  icon:'icon-check'});\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    doneWithdra(id, index, val, address, amount, network){\r\n        let obj = {\r\n            id: id,\r\n            val: val,\r\n            amount: amount,\r\n            address: address,\r\n            network: network\r\n        }\r\n    \r\n        //this.clickDone = true;\r\n        this.$vs.notify({\r\n              text: 'Đang thực hiện yêu cầu!',\r\n              color:'warning',\r\n              iconPack: 'feather',\r\n              icon:'icon-check'\r\n        });\r\n        AuthenticationService.doneWithDrawalByID(obj)\r\n        .then((resp) => {\r\n            //this.clickDone = false;\r\n            let d = resp.data;\r\n            if(d.success){\r\n                  let gd = d.data;\r\n                  if(gd.success == 1){\r\n                    this.productsFake[index].status = 1;\r\n                    this.$vs.notify({\r\n                      text: 'Đã quy đổi thành số tiền là: '+gd.price_trans,\r\n                      color:'success',\r\n                      iconPack: 'feather',\r\n                      icon:'icon-check'});\r\n                    return this.$vs.notify({\r\n                      text: gd.msg,\r\n                      color:'success',\r\n                      iconPack: 'feather',\r\n                      icon:'icon-check'});\r\n                  }else{\r\n                    return this.$vs.notify({\r\n                      text: gd.msg,\r\n                      color:'danger',\r\n                      iconPack: 'feather',\r\n                      icon:'icon-check'});\r\n                  }    \r\n            }else{\r\n                localStorage.removeItem('token');\r\n                this.$router.push('/pages/login').catch(() => {})\r\n            }\r\n        })\r\n    },\r\n\r\n    deleteWithdra(id, index, val) {\r\n      let token = localStorage.getItem('token')\r\n      this.$store.dispatch('setToken', token)\r\n      let obj = {\r\n        id: id,\r\n        val: val\r\n      }\r\n      AuthenticationService.deleteTrashByID(obj)\r\n        .then((resp) => {\r\n          if(resp.data.success){\r\n              Vue.delete(this.productsFake, index)\r\n              this.popupDeleteActive = false\r\n              return this.$vs.notify({\r\n                  text:'Đã xóa thành công',\r\n                  color:'success',\r\n                  iconPack: 'feather',\r\n                  icon:'icon-check'});\r\n          }else{\r\n            localStorage.removeItem('token');\r\n            this.$router.push('/pages/login').catch(() => {})\r\n          }\r\n        })\r\n    },\r\n\r\n    trashDataDeposit(){\r\n      this.showDeleteMultiBt = false\r\n      let token = localStorage.getItem('token')\r\n      this.$store.dispatch('setToken', token)\r\n\r\n      AuthenticationService.getDepositAllTrash()\r\n      .then((resp) => {\r\n        if(!resp.data.success){\r\n            localStorage.removeItem('token');\r\n            this.$router.push('/pages/login').catch(() => {})\r\n        }else{\r\n            this.productsFake = resp.data.data;\r\n        }\r\n      })\r\n    },\r\n\r\n    getOrderStatusColor(status) {\r\n      if(status == 0) return \"warning\"\r\n      if(status == 1) return \"success\"\r\n      if(status == 3) return \"danger\"\r\n      return \"warning\"\r\n    },\r\n\r\n    getOrderStatusColorText(status) {\r\n      if(status == 0) return \"Đang xử lý\"\r\n      if(status == 1) return \"Hoàn thành\"\r\n      if(status == 3) return \"Hoàn thành\"\r\n      return \"Đang xử lý\"\r\n    },\r\n\r\n    getIconType(type){\r\n      let cur = type.toUpperCase();\r\n      return cur\r\n    },\r\n\r\n    formatDate(value){\r\n      if (value) {\r\n          return moment(String(value)).format('MM/DD/YYYY hh:mm:ss')\r\n      }\r\n    },\r\n\r\n    formatPrice(value, minimum){\r\n      if(void 0 === value) value = 0;\r\n      var formatter = new Intl.NumberFormat('en-US', {\r\n          //style: 'currency',\r\n          //currency: '',\r\n          minimumFractionDigits: minimum\r\n      });\r\n      \r\n      return formatter.format(value);\r\n    },\r\n\r\n    getAmountDecimal(type, value){\r\n      let cur = '$'\r\n      let coin = type.toUpperCase()\r\n      let minimum = 2\r\n      if(coin == 'BTC') minimum = 6\r\n      \r\n      if(coin == 'ETH') minimum = 4\r\n\r\n      if(coin == 'USDT') minimum = 2\r\n\r\n      if(coin == 'VN') minimum = 0\r\n\r\n      var formatter = new Intl.NumberFormat('en-US', {\r\n          //style: 'currency',\r\n          //currency: '',\r\n          minimumFractionDigits: minimum\r\n      });\r\n      \r\n      return cur+formatter.format(value);\r\n    },\r\n\r\n    toggleDataSidebar(val=false) {\r\n      this.addNewDataSidebar = val\r\n    },\r\n\r\n\r\n\r\n\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    // export ra file\r\n    //==================================================================\r\n    exportToExcel() {\r\n        // kiểm tra nếu chưa chọn đối tượng thình sẽ không hiện bản xuất file\r\n      if(this.selectedUser.length == 0){\r\n        return this.$vs.notify({\r\n            title:'Xuất dữ liệu',\r\n            text:'Vui lòng chọn nội dung để hoàn thành',\r\n            color:'danger',\r\n            iconPack: 'feather',\r\n            icon:'icon-heart'});\r\n      } \r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        const list = this.selectedUser\r\n        const data = this.formatJson(this.headerVal, list)\r\n        excel.export_json_to_excel({\r\n          header: this.headerTitle,\r\n          data,\r\n          filename: this.fileName,\r\n          autoWidth: this.cellAutoWidth,\r\n          bookType: this.selectedFormat\r\n        })\r\n        this.clearFields()\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => {\r\n        // Add col name which needs to be translated\r\n        // if (j === 'timestamp') {\r\n        //   return parseTime(v[j])\r\n        // } else {\r\n        //   return v[j]\r\n        // }\r\n\r\n        return v[j]\r\n      }))\r\n    },\r\n    clearFields() {\r\n      this.fileName = \"\"\r\n      this.cellAutoWidth = true\r\n      this.selectedFormat = \"xlsx\"\r\n    },\r\n\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    //==================================================================\r\n    openLoadingInDiv(){\r\n        this.$vs.loading({\r\n            container: '#loading-corners',\r\n            type: 'corners',\r\n            scale: 0.6\r\n        })\r\n    },\r\n\r\n\r\n      reloadList(){\r\n          this.showDeleteMultiBt = true\r\n          let token = localStorage.getItem('token')\r\n          this.$store.dispatch('setToken', token)\r\n\r\n          AuthenticationService.getWithdrawalListHistory()\r\n          .then((resp) => {\r\n            \r\n            this.$vs.loading.close('#loading-corners > .con-vs-loading');\r\n\r\n            if(resp.data.success == 4){\r\n                localStorage.removeItem('token');\r\n                this.$router.push('/pages/login').catch(() => {})\r\n            }else{\r\n                this.productsFake = resp.data.data;\r\n            }\r\n          })\r\n    },\r\n\r\n    getDTRut(){\r\n            AuthenticationService.getRevenueRut()\r\n            .then((resp) => {\r\n                let g = resp.data;\r\n                if(g.success == 1){\r\n                  this.dtUSD = g.data.dtUSD;\r\n                  this.dtBNB = g.data.dtBNB;\r\n                  this.feeBNB = g.data.freeBNB;\r\n                }\r\n                \r\n            })\r\n      },\r\n\r\n  },\r\n  created() {\r\n    // if(!moduleDataList.isRegistered) {\r\n    //   this.$store.registerModule('dataList', moduleDataList)\r\n    //   moduleDataList.isRegistered = true\r\n    // }\r\n\r\n    //this.$store.registerModule('dataList', this.productsFake);\r\n    \r\n    //this.$store.dispatch(\"dataList/fetchDataListItems\")\r\n    //console.log(this.productsFake);\r\n    //console.log(this.$store.state.dataList);\r\n    this.reloadList();\r\n    this.getDTRut();\r\n   \r\n  },\r\n  mounted() {\r\n    this.isMounted = true;\r\n    this.openLoadingInDiv();\r\n  }\r\n}\r\n",null]}