{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/chat/ChatNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/chat/ChatNavbar.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    userId: {\n      type: Number,\n      required: true,\n    },\n    isPinnedProp: {\n      type: Boolean,\n      required: true,\n    },\n    isSidebarCollapsed: {\n      type: Boolean,\n      required: true,\n    }\n  },\n  computed: {\n    isPinnedLocal: {\n      get() {\n        return this.isPinnedProp\n      },\n      set(val) {\n        const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId);\n        if (chatData) {\n          const payload = { id: this.userId, value: val };\n          this.$store.dispatch('chat/toggleIsPinned', payload)\n            .then(() => { this.$emit('toggleIsChatPinned', val) })\n            .catch((err) => { console.error(err) })\n        } else {\n          this.$emit('toggleIsChatPinned', val)\n        }\n      }\n    },\n    userDetails() {\n      return this.$store.getters['chat/contact'](this.userId)\n    },\n    getStatusColor() {\n      return (isActiveUser) => {\n        const userStatus = this.getUserStatus(isActiveUser);\n\n        if (userStatus == \"online\") {\n          return \"success\"\n        } else if (userStatus == \"do not disturb\") {\n          return \"danger\"\n        } else if (userStatus == \"away\") {\n          return \"warning\"\n        } else {\n          return \"grey\"\n        }\n      }\n    },\n  },\n  methods: {\n    getUserStatus(isActiveUser) {\n      return (isActiveUser) ? this.$store.state.AppActiveUser.status : this.userDetails.status;\n    }\n  }\n}\n\n",null]}