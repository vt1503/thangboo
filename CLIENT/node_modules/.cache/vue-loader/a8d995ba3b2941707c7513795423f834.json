{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue","mtime":1573632856000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VNavMenuItem from './VerticalNavMenuItem.vue'\n\nexport default {\n  name  : 'v-nav-menu-group',\n  props : {\n    openHover  : { type: Boolean, default: false },\n    open       : { type: Boolean, default: false },\n    group      : { type: Object },\n    groupIndex : { type: Number },\n  },\n  components: {\n    VNavMenuItem\n  },\n  data: () => ({\n    maxHeight : '0px',\n    openItems : false\n  }),\n  computed: {\n    verticalNavMenuItemsMin() { return this.$store.state.verticalNavMenuItemsMin },\n    styleItems() {\n      return { maxHeight: this.maxHeight }\n    },\n    itemIcon() {\n      return (index) => {\n        if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\n      }\n    },\n    isGroupActive() {\n      return (item) => {\n        const path        = this.$route.fullPath\n        let open          = false\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\n\n        let func = (item) => {\n          if (item.submenu) {\n            item.submenu.forEach((item) => {\n              if ((path == item.url || routeParent == item.slug) && item.url) { open = true}\n              else if (item.submenu) { func(item) }\n            })\n          }\n        }\n\n        func(item)\n        return open\n      }\n    },\n  },\n  watch: {\n    // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n    '$route'() {\n      if (this.verticalNavMenuItemsMin) return\n\n      let scrollHeight = this.scrollHeight\n\n      // Collapse Group\n      if (this.openItems && !this.open) {\n\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(()  => {\n          this.maxHeight = `${0}px`\n        }, 50)\n\n      // Expand Group\n      } else if (this.open) {\n\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(()  => {\n          this.maxHeight = 'none'\n        }, 300)\n      }\n    },\n    maxHeight() {\n      this.openItems = this.maxHeight != '0px'\n    },\n    // OPEN AND CLOSES DROPDOWN MENU ON NavMenu COLLAPSE AND DEFAULT VIEW\n    '$store.state.verticalNavMenuItemsMin'(val) {\n      let scrollHeight = this.$refs.items.scrollHeight\n\n      if (!val && this.open) {\n\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(()  => {\n          this.maxHeight = 'none'\n        }, 300)\n      } else {\n\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(()  => {\n          this.maxHeight = '0px'\n        }, 50)\n      }\n      if (val && this.open) {\n\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(()  => {\n          this.maxHeight = '0px'\n        }, 250)\n      }\n    }\n  },\n  methods: {\n    clickGroup() {\n      if (!this.openHover) {\n\n        let thisScrollHeight = this.$refs.items.scrollHeight\n\n        if (this.maxHeight == '0px') {\n          this.maxHeight = `${thisScrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = 'none'\n          }, 300)\n\n        } else {\n          this.maxHeight = `${thisScrollHeight}px`\n          setTimeout(() => {\n            this.maxHeight = `${0}px`\n          }, 50)\n        }\n\n        this.$parent.$children.map((child) => {\n          if (child.isGroupActive) {\n            if (child !== this && (!child.open) && child.maxHeight != '0px') {\n              setTimeout(() => {\n                child.maxHeight = `${0}px`\n              }, 50)\n            }\n          }\n        })\n      }\n    },\n    mouseover() {\n      if (this.openHover) {\n        let scrollHeight = this.$refs.items.scrollHeight\n        this.maxHeight   = `${scrollHeight}px`\n      }\n    },\n    mouseout() {\n      if (this.openHover) {\n        let scrollHeight = 0\n        this.maxHeight   = `${scrollHeight}px`\n      }\n    }\n  },\n  mounted() {\n    this.openItems = this.open\n    if (this.open) { this.maxHeight = 'none' }\n  },\n}\n\n",null]}