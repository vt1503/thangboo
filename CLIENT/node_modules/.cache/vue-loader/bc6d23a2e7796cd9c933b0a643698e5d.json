{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/pages/trade/slidebar/HoSoUser.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/pages/trade/slidebar/HoSoUser.vue","mtime":1650097913910},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\r\nimport HoSoSetting from '@/pages/trade/slidebar/HoSoSetting.vue'\r\nimport AuthenticationService from '@/services/AuthenticationService'\r\nimport getData from '@/pages/trade/navbar/components/data.json'\r\nimport GoogleAuth from '@/pages/trade/slidebar/2FAGoogle'\r\nimport SETTINGS from '../../../../settings.json'\r\n\r\nexport default {\r\n  props: {\r\n    isSidebarActive: {\r\n      type: Boolean,\r\n      required: true\r\n    },\r\n    data: {\r\n      type: Object,\r\n      default: () => {},\r\n    }\r\n  },\r\n  components: {\r\n    VuePerfectScrollbar,\r\n    HoSoSetting,\r\n    GoogleAuth\r\n  },\r\n  watch: {\r\n    \r\n    isSidebarActive(val) {\r\n      if(!val) return\r\n      if(Object.entries(this.data).length === 0) {\r\n        //this.initValues()\r\n        this.$validator.reset()\r\n      }else {\r\n        let { token } = JSON.parse(JSON.stringify(this.data))\r\n        this.token = token\r\n        //this.initValues()\r\n      }\r\n      // Object.entries(this.data).length === 0 ? this.initValues() : { this.dataId, this.dataName, this.dataCategory, this.dataOrder_status, this.dataPrice } = JSON.parse(JSON.stringify(this.data))\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      getDataJson: getData,\r\n      dm: SETTINGS.BASE_URL,\r\n      disableChangePass: false,\r\n      passOld: '',\r\n      passNew: '',\r\n      passRenew: '',\r\n      avatar: 'df.jpg',\r\n      url_avatar: '',\r\n      nickName: '',\r\n      email: '',\r\n      frist_n: '',\r\n      last_n: '',\r\n      swi2Fa: false,\r\n      num_secury: 0,\r\n      colorxChangePass:\"#def1d1\",\r\n      popupActiveChangePass: false,\r\n      popupActive2FA: false,\r\n      // Data Sidebar\r\n      SidebarHSSetting: false,\r\n      sidebarDataSetting: {},\r\n      settings: { // perfectscrollbar settings\r\n          maxScrollbarLength: 60,\r\n          wheelSpeed: .60,\r\n      }\r\n    }\r\n  },\r\n//   filters: {\r\n//     currencydecimal (val) {\r\n//       if(val == 'BTC') return val.toFixed(6)\r\n//       if(val == 'ETH') return val.toFixed(4)\r\n//       return val.toFixed(2)\r\n//     }\r\n//   },\r\n  computed: {\r\n    isSidebarActiveLocal: {\r\n      get() {\r\n        return this.isSidebarActive\r\n      },\r\n      set(val) {\r\n        if(!val) {\r\n          this.$emit('closeSidebar')\r\n          // this.$validator.reset()\r\n          // this.initValues()\r\n        }\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    \r\n  },\r\n  methods: {\r\n\r\n    closeGG2FA() {\r\n        if(!getData.c2fa){\r\n          this.swi2Fa = false\r\n        }else{\r\n          this.swi2Fa = true\r\n        }\r\n    },\r\n\r\n    showHoSoSetting(){\r\n      this.toggleDataSidebar(true)\r\n    },\r\n\r\n    toggleDataSidebar(val=false) {\r\n      this.SidebarHSSetting = val\r\n    },\r\n\r\n\r\n    logOutUser(){\r\n        localStorage.removeItem('tokenUser');\r\n        localStorage.removeItem('INFO');\r\n        getData.Notify = 0;\r\n        localStorage.removeItem('stateOpen');\r\n\r\n        window.location.href = window.location.origin + '/login'\r\n    },\r\n\r\n\r\n    ChangeNewPass(){\r\n      this.disableChangePass = true\r\n\r\n      if(this.passOld == '' || this.passNew == '' || this.passRenew == ''){\r\n        return this.$vs.notify({\r\n            text: 'Mật khẩu không được rỗng.',\r\n            iconPack: 'feather',\r\n            icon: 'icon-alert-circle',\r\n            color: 'warning',\r\n            position:'top-right'\r\n        });\r\n      }\r\n\r\n      if(this.passNew != this.passRenew){\r\n        return this.$vs.notify({\r\n            text: 'Mật khẩu mới của bạn không khớp.',\r\n            iconPack: 'feather',\r\n            icon: 'icon-alert-circle',\r\n            color: 'warning',\r\n            position:'top-right'\r\n        });\r\n      }\r\n\r\n      let obj = {\r\n          email: this.email,\r\n          passOld: this.passOld,\r\n          password: this.passNew,\r\n          code_secure: this.num_secury\r\n      }\r\n\r\n      AuthenticationService.changePassword2(obj)\r\n      .then((res) => {\r\n          this.disableChangePass = false\r\n          if(res.data.success == 1){\r\n              return this.$vs.notify({\r\n                  text: 'Mật khẩu đã được đổi thành công.',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-check',\r\n                  position:'top-right',\r\n                  color: 'success'\r\n              });\r\n          }else if(res.data.success == 0){\r\n              return this.$vs.notify({\r\n                  text: 'Mật khẩu cũ không đúng.',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-check',\r\n                  position:'top-right',\r\n                  color: 'danger'\r\n              });\r\n          }else if(res.data.success == 3){\r\n              return this.$vs.notify({\r\n                  text: 'Mật khẩu đổi thất bại.',\r\n                  iconPack: 'feather',\r\n                  icon: 'icon-check',\r\n                  position:'top-right',\r\n                  color: 'danger'\r\n              });\r\n          }\r\n      })\r\n\r\n    },\r\n\r\n\r\n    on2FA(){\r\n\r\n      this.swi2Fa ? this.swi2Fa = false : this.swi2Fa = true\r\n\r\n        // bật 2Fa\r\n      this.popupActive2FA = true\r\n\r\n    },\r\n\r\n    update_avatar(file){\r\n            //evt.preventDefault()\r\n         \r\n            this.urlPassFront = URL.createObjectURL(file[0]);\r\n            \r\n\r\n            const formData = new FormData();\r\n            formData.append(\"image\", file[0])\r\n            formData.append(\"nick\", getData.displayName)\r\n\r\n            AuthenticationService.uploadAvatar(formData)\r\n            .then((res) => {\r\n                if(res.data.success){\r\n                    return this.$vs.notify({\r\n                        text: 'Ảnh đại diện thay đổi thành công.',\r\n                        iconPack: 'feather',\r\n                        icon: 'icon-check',\r\n                        position:'top-right',\r\n                        color: 'success'\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n  },\r\n\r\n  created() {\r\n\r\n    this.nickName = getData.displayName\r\n    this.avatar = getData.profile_image\r\n    this.email = getData.email\r\n    this.frist_n = getData.first_name\r\n    this.last_n = getData.last_name\r\n\r\n    this.swi2Fa = getData.c2fa\r\n\r\n    this.num_secury = getData.num_secu\r\n\r\n  \r\n  },\r\n  \r\n}\r\n",null]}