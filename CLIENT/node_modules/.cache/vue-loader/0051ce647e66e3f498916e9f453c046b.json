{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/calendar/SimpleCalendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/calendar/SimpleCalendar.vue","mtime":1572081598000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { CalendarView, CalendarViewHeader } from \"vue-simple-calendar\"\nimport moduleCalendar from '@/store/calendar/moduleCalendar.js'\nrequire(\"vue-simple-calendar/static/css/default.css\")\n\nimport Datepicker from 'vuejs-datepicker'\nimport { en, he } from \"vuejs-datepicker/src/locale\"\n\nexport default {\n  components: {\n    CalendarView,\n    CalendarViewHeader,\n    Datepicker\n  },\n  data() {\n    return {\n      showDate: new Date(),\n      disabledFrom: false,\n      id: 0,\n      title: '',\n      startDate: '',\n      endDate: '',\n      labelLocal: 'none',\n\n      langHe: he,\n      langEn: en,\n\n      url: '',\n      calendarView: 'month',\n\n      activePromptAddEvent: false,\n      activePromptEditEvent: false,\n\n      calendarViewTypes: [\n        {\n          label: \"Month\",\n          val: \"month\"\n        },\n        {\n          label: \"Week\",\n          val: \"week\"\n        },\n        {\n          label: \"Year\",\n          val: \"year\"\n        },\n      ]\n    }\n  },\n  computed: {\n    simpleCalendarEvents() {\n        return this.$store.state.calendar.events\n    },\n    validForm() {\n        return this.title != '' && this.startDate != '' && this.endDate != '' && (Date.parse(this.endDate) - Date.parse(this.startDate)) >= 0 && !this.errors.has('event-url');\n    },\n    disabledDatesTo() {\n        return { to: new Date(this.startDate) }\n    },\n    disabledDatesFrom() {\n        return { from: new Date(this.endDate) }\n    },\n    calendarLabels() {\n        return this.$store.state.calendar.eventLabels\n    },\n    labelColor() {\n        return (label) => {\n            if (label == \"business\") return \"success\"\n            else if (label == \"work\") return \"warning\"\n            if (label == \"personal\") return \"danger\"\n            if (label == \"none\") return \"primary\"\n        }\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth\n    }\n  },\n  methods: {\n    addEvent() {\n        const obj = { title: this.title, startDate: this.startDate, endDate: this.endDate, label: this.labelLocal, url: this.url }\n        obj.classes = \"event-\" + this.labelColor(this.labelLocal)\n        this.$store.dispatch('calendar/addEvent', obj);\n    },\n    updateMonth(val) {\n      this.showDate = this.$refs.calendar.getIncrementedPeriod(val);\n    },\n    clearFields() {\n        this.title = this.endDate = this.url = \"\";\n        this.id= 0;\n        this.labelLocal = \"none\";\n    },\n    promptAddNewEvent(date) {\n        this.disabledFrom = false;\n        this.addNewEventDialog(date);\n    },\n    addNewEventDialog(date) {\n        this.clearFields();\n        this.startDate = date;\n        this.endDate = date;\n        this.activePromptAddEvent = true;\n    },\n    openAddNewEvent(date) {\n        this.disabledFrom = true;\n        this.addNewEventDialog(date);\n    },\n    openEditEvent(event) {\n      const e = this.$store.getters['calendar/getEvent'](event.id)\n      this.id = e.id\n      this.title = e.title\n      this.startDate = e.startDate\n      this.endDate = e.endDate\n      this.url = e.url\n      this.labelLocal = e.label\n      this.activePromptEditEvent = true;\n    },\n    editEvent() {\n      const obj = { id: this.id, title: this.title, startDate: this.startDate, endDate: this.endDate, label: this.labelLocal, url: this.url }\n      obj.classes = \"event-\" + this.labelColor(this.labelLocal)\n      this.$store.dispatch('calendar/editEvent', obj)\n    },\n    removeEvent() {\n      this.$store.dispatch('calendar/removeEvent', this.id)\n    },\n    eventDragged(event, date) {\n      this.$store.dispatch('calendar/eventDragged', {event: event, date: date})\n    }\n  },\n  created() {\n    this.$store.registerModule('calendar', moduleCalendar)\n    this.$store.dispatch(\"calendar/fetchEvents\")\n    this.$store.dispatch(\"calendar/fetchEventLabels\")\n  },\n  beforeDestroy() {\n    this.$store.unregisterModule('calendar')\n  }\n}\n",null]}