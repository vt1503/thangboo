{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/components/vx-card/VxCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/components/vx-card/VxCard.vue","mtime":1573138056000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Prism from 'vue-prism-component'\nimport _color from '@/assets/utils/color.js'\n\nexport default{\n    name: 'vx-card',\n    props: {\n        title: String,\n        subtitle: String,\n        actionButtons: {\n            type: Boolean,\n            default: false,\n        },\n        actionButtonsColor: {\n            type: String,\n            default: \"success\",\n        },\n        codeToggler: {\n            type: Boolean,\n            default: false,\n        },\n        noShadow: {\n            default: false,\n            type: Boolean,\n        },\n        noRadius: {\n            default: false,\n            type: Boolean,\n        },\n        cardBorder: {\n            default: false,\n            type: Boolean,\n        },\n        codeLanguage: {\n            default: \"markup\",\n            type: String,\n        },\n        collapseAction: {\n            default: false,\n            type: Boolean\n        },\n        refreshContentAction: {\n            default: false,\n            type: Boolean\n        },\n        removeCardAction: {\n            default: false,\n            type: Boolean\n        },\n        headerBackground: {\n          default: '',\n          type: String\n        },\n        // bodyBackground: {\n        //   default: '',\n        //   type: String\n        // },\n        // headerbackground: {\n        //   default: '',\n        //   type: String\n        // },\n        cardBackground: {\n          default: '',\n          type: String\n        },\n        contentColor: {\n          default: '',\n          type: String\n        },\n        titleColor: {\n          default: '',\n          type: String\n        },\n        subtitleColor: {\n          default: '#b8c2cc',\n          type: String\n        }\n    },\n    data() {\n        return {\n            isContentCollapsed: false,\n            showCode: false,\n            maxHeight: null,\n            cardMaxHeight: null,\n            codeContainerMaxHeight: '0px',\n            tempHidden: false,\n        }\n    },\n    computed: {\n        hasAction() {\n            return this.$slots.actions || (this.actionButtons || this.collapseAction || this.refreshContentAction || this.removeCardAction || this.codeToggler)\n        },\n        hasHeader() {\n            return this.hasAction || (this.title || this.subtitle)\n        },\n        StyleItems() {\n            return { maxHeight: this.maxHeight }\n        },\n        cardStyles() {\n            let obj = { maxHeight: this.cardMaxHeight }\n            if (!_color.isColor(this.cardBackground)) obj.background = _color.getColor(this.cardBackground)\n            if (!_color.isColor(this.contentColor)) obj.color = _color.getColor(this.contentColor)\n            return obj\n        },\n        codeContainerStyles() {\n            return { maxHeight: this.codeContainerMaxHeight }\n        },\n        cardClasses() {\n          let str = ''\n\n          // Add bg class\n          if(_color.isColor(this.cardBackground)) {\n            str += ` bg-${this.cardBackground}`\n          }\n\n          // add content color\n          if (_color.isColor(this.contentColor)){\n            str += ` text-${this.contentColor}`\n          }\n\n          return str.trim()\n        },\n        titleStyles() {\n          return {\n            color: _color.getColor(this.titleColor)\n          }\n        },\n        titleClasses() {\n          let str = ''\n\n          // add content color\n          if(_color.isColor(this.titleColor)) {\n            str += ` text-${this.titleColor}`\n          }\n\n          return str.trim()\n        },\n        subtitleStyles() {\n          let obj = {}\n          if (!_color.isColor(this.subtitleColor)) obj.color = _color.getColor(this.subtitleColor)\n\n          return obj\n        },\n        subtitleClasses() {\n          let str = ''\n\n          // add content color\n          if(_color.isColor(this.subtitleColor)) {\n            str += ` text-${this.subtitleColor}`\n          }\n\n          return str.trim()\n        },\n    },\n    methods: {\n        toggleContent() {\n            this.$refs.content.style.overflow = \"hidden\"\n            let scrollHeight = this.$refs.content.scrollHeight\n            if (this.maxHeight == '1.5rem') {\n                this.maxHeight = `${scrollHeight}px`\n                setTimeout(() => {\n                    this.maxHeight = 'none'\n                    this.$refs.content.style.overflow = null\n                }, 300)\n            } else {\n                this.maxHeight = `${scrollHeight}px`\n                setTimeout(() => {\n                    this.maxHeight = `1.5rem`\n                    this.$refs.content.style.overflow = null\n                }, 50)\n            }\n            this.isContentCollapsed = !this.isContentCollapsed\n            this.$emit(\"toggleCollapse\", this.isContentCollapsed)\n        },\n        refreshcard() {\n            this.$vs.loading({\n                container: this.$refs.content,\n                scale: 0.5,\n            })\n            this.tempHidden = true\n            this.$emit(\"refresh\", this)\n        },\n        removeRefreshAnimation(time=100) {\n            setTimeout( ()=> {\n                this.$vs.loading.close(this.$refs.content)\n                this.tempHidden = false\n            }, time)\n        },\n        removeCard() {\n            let scrollHeight = this.$refs.card.scrollHeight\n            this.cardMaxHeight = `${scrollHeight}px`\n            this.$el.style.overflow = \"hidden\"\n            setTimeout(() => {\n                this.cardMaxHeight = `0px`\n            }, 50)\n            this.$emit(\"remove\")\n        },\n        toggleCode() {\n            this.tempHidden = true\n            this.showCode = !this.showCode\n            let scrollHeight = this.$refs.codeContainer.scrollHeight\n            if (this.codeContainerMaxHeight == '0px') {\n                this.codeContainerMaxHeight = `${scrollHeight}px`\n                setTimeout(() => {\n                    this.codeContainerMaxHeight = 'none'\n                    this.tempHidden = false\n                }, 300)\n            } else {\n                this.codeContainerMaxHeight = `${scrollHeight}px`\n                setTimeout(() => {\n                    this.codeContainerMaxHeight = `0px`\n                    this.tempHidden = false\n                }, 150)\n            }\n        },\n    },\n    components: {\n        Prism,\n    }\n}\n",null]}