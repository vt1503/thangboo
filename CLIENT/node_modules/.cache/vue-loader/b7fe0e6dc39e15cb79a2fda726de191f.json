{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/horizontal-nav-menu/HorizontalNavMenuGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/horizontal-nav-menu/HorizontalNavMenuGroup.vue","mtime":1572932570000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import VNavMenuItem from './VerticalNavMenuItem.vue'\nimport HNavMenuItem from \"./HorizontalNavMenuItem.vue\"\n\nexport default {\n  name  : 'h-nav-menu-group',\n  props : {\n    openHover  : { type: Boolean, default: true },\n    open       : { type: Boolean, default: false },\n    group      : { type: Object },\n    groupIndex : { type: Number },\n    bottom     : { type: Boolean, default: false }\n  },\n  components: {\n    HNavMenuItem\n  },\n  data: () => ({\n    openItems : false,\n    hovered: false,\n    dropLeft: false,\n  }),\n  computed: {\n    iconClasses() {\n      let classes = \"mr-3 \"\n      classes += this.groupIndex % 1 != 0 ? 'w-3 h-3' : 'w-5 h-5'\n      return classes\n    },\n    styleItems() {\n      let style = {}\n      if(this.bottom) {\n        style.top = \"100%\"\n        style.left = \"0\"\n      }else {\n        style.top = \"12px\"\n        style.left = \"100%\"\n      }\n\n      if(this.dropLeft) {\n        style.left = null\n        style.right = \"100%\"\n      }\n\n      if(this.$vs.rtl) {\n        let temp = style.left\n        style.left = style.right\n        style.right = temp\n      }\n\n      return style\n    },\n    itemIcon() {\n      // return (index) => {\n      //   // if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\"\n      // }\n      return \"CircleIcon\"\n    },\n    isGroupActive() {\n      return (item) => {\n        const path        = this.$route.fullPath\n        let open          = false\n        const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\n\n        let func = (item) => {\n          if (item.submenu) {\n            item.submenu.forEach((item) => {\n              if ((path == item.url || routeParent == item.slug) && item.url) { open = true}\n              else if (item.submenu) { func(item) }\n            })\n          }\n        }\n\n        func(item)\n        return open\n      }\n    },\n  },\n  watch: {\n    hovered(val) {\n      this.$nextTick(() => {\n        if(val) {\n          let dd = this.$refs.childDropdown\n\n          if(((window.innerHeight - dd.getBoundingClientRect().top) - dd.getBoundingClientRect().height - 28) < 1) {\n            const maxHeight = (window.innerHeight - dd.getBoundingClientRect().top - 70)\n            dd.style.maxHeight = `${maxHeight}px`\n            dd.style.overflowY = \"auto\"\n            dd.style.overflowX = \"hidden\"\n          }\n\n          if(dd.getBoundingClientRect().left + dd.offsetWidth - (window.innerWidth - 16) >= 0 || this.$parent.dropLeft) {\n            this.dropLeft = true\n          }\n\n          if(this.$vs.rtl) {\n            if(dd.getBoundingClientRect().right - dd.offsetWidth - 16 < 0) {\n              this.dropLeft = true\n            }\n          }\n        }else {\n          this.dropLeft = false\n        }\n      })\n    }\n  },\n  methods: {\n    mouseover() {\n      this.hovered = true\n      if (this.openHover) {\n        this.showChildren()\n      }\n    },\n    mouseout() {\n      this.hovered = false\n      if (this.openHover) {\n        this.showChildren(false)\n      }\n    },\n    showChildren(val = true) {\n      this.openItems = val\n    }\n  },\n}\n\n",null]}