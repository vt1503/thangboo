{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/trading/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/trading/Index.vue","mtime":1650691096706},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Chart } from 'highcharts-vue'\r\nimport Highcharts from 'highcharts'\r\nimport More from 'highcharts/highcharts-more'\r\nimport stockInit from 'highcharts/modules/stock'\r\nimport loadIndicatorsAll from 'highcharts/indicators/indicators'\r\nimport { isMobile, isTablet } from 'mobile-device-detect'\r\nimport getData from '@/pages/trade/navbar/components/data.json'\r\nimport SETTINGS from '../../../settings.json'\r\nimport AuthenticationService from '@/services/AuthenticationService'\r\n\r\nMore(Highcharts)\r\nstockInit(Highcharts)\r\nloadIndicatorsAll(Highcharts)\r\n\r\n\r\nlet timer = null\r\n\r\nfunction convertTextValueMeter(t) {\r\n    return t >= -90 && t <= -54 ? {cl: 'rank-1', text: \"Strong sell\", index: 1} : t > -54 && t <= -18 ? {cl: 'rank-2', text: \"Sell\", index: 2} : t > -18 && t <= 17 ? {cl: 'rank-3', text: \"Neutral\", index: 3} : t > 17 && t <= 53 ? {cl: 'rank-4', text: \"Buy\", index: 4} : t > 53 ? {cl: 'rank-5', text: \"Strong Buy\", index: 5} : void 0\r\n}\r\n\r\nvar UP_COLOR = \"#23c15f\",  DOWN_COLOR = \"#ee4b60\", deviceVersion = 'pc'\r\n\r\nvar progressBar = $('.e-c-progress')\r\nvar lengthp = Math.PI * 2 * 100;\r\nprogressBar.css('stroke-dasharray', lengthp)\r\n\r\n//circle ends\r\n//let wholeTime = 30; // manage this to set the whole time\r\n\r\n\r\nif(isMobile){\r\n    deviceVersion = 'mobile'\r\n}else if(isTablet){\r\n    deviceVersion = 'tablet';\r\n}\r\n\r\nvar listData = [], ohlcStock = [], volumeStock = [];\r\n\r\nvar chartGet = '', connected = false;\r\n\r\nconst stockChart = {\r\n    chart: {\r\n        panning: false,\r\n        followTouchMove: false,\r\n        // width: '100%',\r\n        // height: \"pc\" !== deviceVersion ? '100%' : (9 / 16 * 100) + '%', // 16:9 ratio\r\n        zoomType: \"\",\r\n        backgroundColor: \"transparent\",\r\n        // plotBackgroundImage: require('@/assets/images/sky/world_map.svg'),\r\n        marginLeft: 0,\r\n        marginRight: \"pc\" !== deviceVersion ? 60 : 80,\r\n        marginBottom: \"pc\" !== deviceVersion ? 20 : 30,\r\n\r\n        // margin: 0,\r\n        // defaultSeriesType: 'areaspline',\r\n\r\n        events: {\r\n            // load(event) {\r\n                // event.target.reflow();\r\n            // }\r\n        },\r\n    },\r\n    rangeSelector: {\r\n        enabled: false,\r\n        selected: 4\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    scrollbar: {\r\n        enabled: false\r\n    },\r\n    navigator: {\r\n        enabled: false\r\n    },\r\n\r\n    stockTools: {\r\n        gui: {\r\n            enabled: false\r\n        }\r\n    },\r\n    exporting: {\r\n        enabled: false\r\n    },\r\n    plotOptions: {\r\n        candlestick: {\r\n            lineColor: DOWN_COLOR,\r\n            upLineColor: UP_COLOR,\r\n            pointWidth: \"pc\" !== deviceVersion ? 10 : 11,\r\n            maxPointWidth: \"pc\" !== deviceVersion ? 9 : 11\r\n        },\r\n        column: {\r\n            minPointLength: 2,\r\n            pointWidth: \"pc\" !== deviceVersion ? 10 : 11,\r\n            maxPointWidth: \"pc\" !== deviceVersion ? 9 : 11,\r\n            borderWidth: 0,\r\n            pointPadding: 0,\r\n            groupPadding: 0\r\n        },\r\n        series: {\r\n            zIndex: 2,\r\n\r\n            states: {\r\n                inactive: {\r\n                    opacity: 1\r\n                }\r\n            },\r\n            allowPointSelect: false,\r\n            point: {\r\n                events: {\r\n                    click() {}\r\n                }\r\n            }\r\n        }\r\n    },\r\n    tooltip: {\r\n        split: false,\r\n        enabled: true,\r\n        label: false,\r\n        animation: false,\r\n        backgroundColor: \"#081a34\",\r\n        borderColor: \"transparent\",\r\n        borderWidth: 0,\r\n        shadow: false,\r\n        stroke: \"transparent\",\r\n        useHTML: true,\r\n        style: {\r\n            color: \"#fff\",\r\n            fontSize: \"10px\",\r\n            stroke: \"transparent\"\r\n        },\r\n        formatter() {\r\n            return \"BTC/USDT\" === this.series.name ? '\\n<span style=\"margin-right: 10px;\"><b>O</b>: ' + this.point.open + '</span>\\n<span style=\"margin-right: 10px;\"><b>C</b>: ' + this.point.close + '</span>\\n<span>&nbsp;</span>\\n<br/>\\n<span style=\"margin-right: 10px;\"><b>H</b>: ' + this.point.high + '</span>\\n<span style=\"margin-right: 10px;\"><b>L</b>: ' + this.point.low + \"</span>\\n<span><b>Vol</b>: \" + this.point.vol + \"</span>\" : \"Volume\" === this.series.name ? \"<b>Vol</b>: \" + this.y : \"\"\r\n        },\r\n        positioner() {\r\n            var t = 20,\r\n                e = \"pc\" !== deviceVersion ? 50 : 60;\r\n            return {\r\n                x: t,\r\n                y: e\r\n            }\r\n        }\r\n    },\r\n    xAxis: {\r\n        //minRange:30 * 24,\r\n        type: \"datetime\",\r\n        labels: {\r\n            enabled: true,\r\n            formatter() {\r\n                return Highcharts.dateFormat('%M:%S', this.value);\r\n            },\r\n            style: {\r\n                fontSize: 10,\r\n                color: \"#707070\"\r\n            }\r\n        },\r\n        plotLines: [{\r\n            value: 0,\r\n            color: \"#ffffff\",\r\n            width: .75,\r\n            id: \"current-pricex\",\r\n            zIndex: 1e3,\r\n            dashStyle: \"LongDash\"\r\n        }],\r\n        lineWidth: 0,\r\n        minorGridLineWidth: 0,\r\n        lineColor: \"transparent\",\r\n        minorTickLength: 0,\r\n        tickLength: 0\r\n    },\r\n    yAxis: [{\r\n        gridLineColor: \"#35275B\",\r\n        labels: {\r\n            align: \"right\",\r\n            x: \"pc\" !== deviceVersion ? 45 : 50,\r\n            style: {\r\n                color: \"#fff\",\r\n                fontSize: \"11px\"\r\n            }\r\n        },\r\n        height: \"90%\",\r\n        top: 0,\r\n        plotLines: [{\r\n            value: 0,\r\n            color: \"#ffffff\",\r\n            width: .75,\r\n            id: \"current-price\",\r\n            zIndex: 100,\r\n            label: {\r\n                useHTML: true,\r\n                text: 0,\r\n                x: \"pc\" !== deviceVersion ? 60 : 70,\r\n                align: \"right\",\r\n                style: {\r\n                    color: \"#fff\",\r\n                    fontSize: \"11px\",\r\n                    background: \"transparent\",\r\n                    borderRadius: \"4px\"\r\n                }\r\n            }\r\n        }],\r\n        lineWidth: 0,\r\n        resize: {\r\n            enabled: true\r\n        }\r\n    }, {\r\n        gridLineColor: \"\",\r\n        visible: false,\r\n        title: {\r\n            align: \"high\",\r\n            text: null,\r\n            rotation: 0,\r\n            y: 0,\r\n            useHTML: true\r\n        },\r\n        top: \"pc\" == deviceVersion ? \"83.4%\" : \"85%\",\r\n        height: \"15%\",\r\n        lineWidth: 0,\r\n        offset: 0\r\n    }],\r\n    series: [{\r\n        id: \"aapl\",\r\n        type: \"candlestick\",\r\n        name: \"BTC/USDT\",\r\n        color: DOWN_COLOR,\r\n        upColor: UP_COLOR,\r\n        data: ohlcStock\r\n    }, {\r\n        type: \"column\",\r\n        name: \"Volume\",\r\n        data: volumeStock,\r\n        yAxis: 1\r\n    },\r\n    {\r\n        name: \"sma1\",\r\n        id: \"sma1\",\r\n        type: \"sma\",\r\n        linkedTo: \"aapl\",\r\n        color: \"#2177FF\",\r\n        lineWidth: 2,\r\n        marker: false ,\r\n        zIndex: 3,\r\n        visible: true,\r\n        enableMouseTracking: false,\r\n        params: {\r\n            index: \"0\",\r\n            period: 10\r\n        },\r\n        allowPointSelect: false,\r\n        point: {\r\n            events: {\r\n                // click: function(t) {\r\n                //     setTimeout(function() {}, 500)\r\n                // }\r\n            },\r\n            tooltip: {\r\n                enabled: false\r\n            }\r\n        }\r\n    },\r\n    {\r\n        name: \"sma2\",\r\n        id: \"sma2\",\r\n        type: \"sma\",\r\n        linkedTo: \"aapl\",\r\n        color: \"#E22A67\",\r\n        lineWidth: 2,\r\n        marker: false,\r\n        zIndex: 3,\r\n        visible: true,\r\n        enableMouseTracking: false,\r\n        params: {\r\n        index: \"1\",\r\n            period: 5\r\n        },\r\n        allowPointSelect: false,\r\n        point: {\r\n            events: {\r\n                // click: function(t) {\r\n                //     setTimeout(function() {}, 500)\r\n                // }\r\n            },\r\n            tooltip: {\r\n                enabled: false\r\n            }\r\n        }\r\n    }\r\n    ]\r\n}\r\n\r\nconst gaugeMeterOs = {\r\n  chart: {\r\n        type: \"gauge\",\r\n        plotBorderWidth: null,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        plotBackgroundColor: null,\r\n        plotBackgroundImage: null,\r\n        height: 70,\r\n        spacingBottom: 0,\r\n        spacingTop: 0,\r\n        spacingLeft: 0,\r\n        spacingRight: 0,\r\n        events: {\r\n            render(t) {\r\n                let td = t.target.series[0].points[0].y\r\n                let n = convertTextValueMeter(td)\r\n                $(\".gauge-meter--os .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl)\r\n                $(\".gauge-meter--os .gauge-meter-label-item\").removeClass(\"active\")\r\n                $(\".gauge-meter--os .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\")\r\n            }\r\n        },\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"easeOutBounce\"\r\n        },\r\n\r\n    },\r\n\r\n    title: {\r\n        text: ''\r\n    },\r\n\r\n    pane: [{\r\n        startAngle: -90,\r\n        endAngle: 90,\r\n        background: null,\r\n        center: [\"50%\", \"105%\"],\r\n        size: 140\r\n    }],\r\n\r\n    credits: {\r\n        enabled: false\r\n    },\r\n\r\n    exporting: {\r\n        enabled: false\r\n    },\r\n\r\n    tooltip: {\r\n        enabled: false\r\n    },\r\n\r\n    yAxis: [{\r\n        min: -90,\r\n        max: 90,\r\n        minorTickPosition: \"outside\",\r\n        tickPosition: \"outside\",\r\n        labels: {\r\n            rotation: \"auto\",\r\n            distance: 0,\r\n            style: {\r\n                color: \"rgba(0,0,0,0)\"\r\n            }\r\n        },\r\n        pane: 0,\r\n        title: \"\",\r\n        minorTickColor: \"rgba(0,0,0,0)\",\r\n        lineColor: \"rgba(0,0,0,0)\",\r\n        tickColor: \"rgba(0,0,0,0)\"\r\n    }],\r\n\r\n\r\n    plotOptions: {\r\n        gauge: {\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            dial: {\r\n                radius: \"85%\",\r\n                baseLength: \"1%\",\r\n                rearLength: 0,\r\n                backgroundColor: {\r\n                    linearGradient: {\r\n                        x1: 1,\r\n                        y1: 0,\r\n                        x2: 0,\r\n                        y2: 0\r\n                    },\r\n                    stops: [\r\n                        [0, \"#fff\"],\r\n                        [1, \"#000\"]\r\n                    ]\r\n                },\r\n                baseWidth: 6,\r\n                topWidth: 3\r\n            }\r\n        }\r\n    },\r\n\r\n    series: [{\r\n        name: \"Oscillator\",\r\n        data: [10],\r\n        yAxis: 0\r\n    }],\r\n    responsive: {\r\n        rules: [{\r\n            condition: {\r\n                maxWidth: 71\r\n            },\r\n            chartOptions: {\r\n                chart: {\r\n                    height: 35\r\n                },\r\n                pane: [{\r\n                    size: 70\r\n                }]\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nconst gaugeMeterSu = {\r\n  chart: {\r\n        type: \"gauge\",\r\n        plotBorderWidth: null,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        plotBackgroundColor: null,\r\n        plotBackgroundImage: null,\r\n        height: 88,\r\n        spacingBottom: 0,\r\n        spacingTop: 0,\r\n        spacingLeft: 0,\r\n        spacingRight: 0,\r\n        events: {\r\n            render(t) {\r\n                let td = t.target.series[0].points[0].y\r\n                let n = convertTextValueMeter(td)\r\n                $(\".gauge-meter--su .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl)\r\n                $(\".gauge-meter--su .gauge-meter-label-item\").removeClass(\"active\")\r\n                $(\".gauge-meter--su .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\")\r\n\r\n            }\r\n        },\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"easeOutBounce\"\r\n        },\r\n\r\n    },\r\n\r\n    title: {\r\n        text: ''\r\n    },\r\n\r\n    pane: [{\r\n        startAngle: -90,\r\n        endAngle: 90,\r\n        background: null,\r\n        center: [\"50%\", \"105%\"],\r\n        size: 176\r\n    }],\r\n\r\n    credits: {\r\n        enabled: false\r\n    },\r\n\r\n    exporting: {\r\n        enabled: false\r\n    },\r\n\r\n    tooltip: {\r\n        enabled: false\r\n    },\r\n\r\n    yAxis: [{\r\n        min: -90,\r\n        max: 90,\r\n        minorTickPosition: \"outside\",\r\n        tickPosition: \"outside\",\r\n        labels: {\r\n            rotation: \"auto\",\r\n            distance: 0,\r\n            style: {\r\n                color: \"rgba(0,0,0,0)\"\r\n            }\r\n        },\r\n        pane: 0,\r\n        title: \"\",\r\n        minorTickColor: \"rgba(0,0,0,0)\",\r\n        lineColor: \"rgba(0,0,0,0)\",\r\n        tickColor: \"rgba(0,0,0,0)\"\r\n    }],\r\n\r\n\r\n    plotOptions: {\r\n        gauge: {\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            dial: {\r\n                radius: \"85%\",\r\n                baseLength: \"1%\",\r\n                rearLength: 0,\r\n                backgroundColor: {\r\n                    linearGradient: {\r\n                        x1: 1,\r\n                        y1: 0,\r\n                        x2: 0,\r\n                        y2: 0\r\n                    },\r\n                    stops: [\r\n                        [0, \"#fff\"],\r\n                        [1, \"#000\"]\r\n                    ]\r\n                },\r\n                baseWidth: 6,\r\n                topWidth: 3\r\n            }\r\n        }\r\n    },\r\n\r\n    series: [{\r\n        name: \"Summary\",\r\n        data: [10],\r\n        yAxis: 0\r\n    }],\r\n    responsive: {\r\n        rules: [{\r\n            condition: {\r\n                maxWidth: 89\r\n            },\r\n            chartOptions: {\r\n                chart: {\r\n                    height: 44\r\n                },\r\n                pane: [{\r\n                    size: 88\r\n                }]\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nconst gaugeMeterMa = {\r\n  chart: {\r\n        type: \"gauge\",\r\n        plotBorderWidth: null,\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        plotBackgroundColor: null,\r\n        plotBackgroundImage: null,\r\n        height: 70,\r\n        spacingBottom: 0,\r\n        spacingTop: 0,\r\n        spacingLeft: 0,\r\n        spacingRight: 0,\r\n        events: {\r\n            render(t) {\r\n                let td = t.target.series[0].points[0].y\r\n                let n = convertTextValueMeter(td)\r\n                $(\".gauge-meter--ma .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl)\r\n                $(\".gauge-meter--ma .gauge-meter-label-item\").removeClass(\"active\")\r\n                $(\".gauge-meter--ma .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\")\r\n            }\r\n        },\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"easeOutBounce\"\r\n        },\r\n\r\n    },\r\n\r\n    title: {\r\n        text: ''\r\n    },\r\n\r\n    pane: [{\r\n        startAngle: -90,\r\n        endAngle: 90,\r\n        background: null,\r\n        center: [\"50%\", \"105%\"],\r\n        size: 140\r\n    }],\r\n\r\n    credits: {\r\n        enabled: false\r\n    },\r\n\r\n    exporting: {\r\n        enabled: false\r\n    },\r\n\r\n    tooltip: {\r\n        enabled: false\r\n    },\r\n\r\n    yAxis: [{\r\n        min: -90,\r\n        max: 90,\r\n        minorTickPosition: \"outside\",\r\n        tickPosition: \"outside\",\r\n        labels: {\r\n            rotation: \"auto\",\r\n            distance: 0,\r\n            style: {\r\n                color: \"rgba(0,0,0,0)\"\r\n            }\r\n        },\r\n        pane: 0,\r\n        title: \"\",\r\n        minorTickColor: \"rgba(0,0,0,0)\",\r\n        lineColor: \"rgba(0,0,0,0)\",\r\n        tickColor: \"rgba(0,0,0,0)\"\r\n    }],\r\n\r\n\r\n    plotOptions: {\r\n        gauge: {\r\n            dataLabels: {\r\n                enabled: false\r\n            },\r\n            dial: {\r\n                radius: \"85%\",\r\n                baseLength: \"1%\",\r\n                rearLength: 0,\r\n                backgroundColor: {\r\n                    linearGradient: {\r\n                        x1: 1,\r\n                        y1: 0,\r\n                        x2: 0,\r\n                        y2: 0\r\n                    },\r\n                    stops: [\r\n                        [0, \"#fff\"],\r\n                        [1, \"#000\"]\r\n                    ]\r\n                },\r\n                baseWidth: 6,\r\n                topWidth: 3\r\n            }\r\n        }\r\n    },\r\n\r\n    series: [{\r\n        name: \"ma\",\r\n        data: [10],\r\n        yAxis: 0\r\n    }],\r\n    responsive: {\r\n        rules: [{\r\n            condition: {\r\n                maxWidth: 71\r\n            },\r\n            chartOptions: {\r\n                chart: {\r\n                    height: 35\r\n                },\r\n                pane: [{\r\n                    size: 70\r\n                }]\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    highcharts: Chart\r\n  },\r\n  data() {\r\n    return {\r\n\r\n        thisIDPlayer: 0,\r\n        totalBuyStatic: 0,\r\n        totalSellStatic: 0,\r\n\r\n        //Moving\r\n        NumMovBUY: 0,\r\n        NumMovSELL: 0,\r\n        NumMovNeutral: 0,\r\n        textTitleMa: 'NEUTRAL',\r\n\r\n        //Oscillators\r\n        NumOscBUY: 0,\r\n        NumOscSELL: 0,\r\n        NumOscNeutral: 0,\r\n        textTitleOs: 'NEUTRAL',\r\n\r\n        //Summary\r\n        NumSumBUY: 0,\r\n        NumSumSELL: 0,\r\n        NumSumNeutral: 0,\r\n        textTitleSu: 'NEUTRAL',\r\n\r\n        moneyWin: 0,\r\n        isWinPop: false,\r\n        blObj: getData,\r\n        isBet: true,\r\n        CSBUY: 0,\r\n        CSSELL: 0,\r\n        isOrder: true,\r\n        activeGau: false,\r\n        activeHis: true,\r\n        balanceForuser: 0,\r\n        showMobileMenu: false,\r\n        betAmount: 10,\r\n        loiNhuan: 19.50,\r\n        optionsOs: gaugeMeterOs,\r\n        optionsSu: gaugeMeterSu,\r\n        optionsMa: gaugeMeterMa,\r\n        // chartOptions: {\r\n        //     series: [{\r\n        //         data: [1,2,3] // sample data\r\n        //         }]\r\n        // }\r\n        chartOptionsStock: stockChart,\r\n        betOpen: {\r\n            \"s\": 0,\r\n            \"l\": {\r\n                \"bet\": [\r\n                    {\r\n                        \"items\": []\r\n                    }\r\n                ]\r\n            },\r\n        },\r\n        isTablet,\r\n    }\r\n  },\r\n  computed: {\r\n      seconDown(){\r\n          return getData.countDown;\r\n      },\r\n      textTimeDown(){\r\n          return getData.textTimeDown;\r\n      },\r\n      isOpenSideBar() {\r\n          const isOpenSideBarStore = this.$store.state.isOpenSideBar;\r\n          return isOpenSideBarStore;\r\n      },\r\n  },\r\n  watch: {\r\n    \"oscillators.meter.numberValue\": function() {\r\n        this.redrawGaugeMeter(\"oscillators\"), this.redrawGaugeMeter(\"summary\")\r\n    },\r\n    \"movingAverages.meter.numberValue\": function() {\r\n        this.redrawGaugeMeter(\"movingAverages\"), this.redrawGaugeMeter(\"summary\")\r\n    },\r\n    \"isOpenSideBar\": function (isOpenSideBarStore) {\r\n        const tradeView = document.querySelector('.highcharts-container');\r\n        const cDesktop = document.querySelector('.c-desktop');\r\n        if (isTablet || isMobile) return isOpenSideBarStore;\r\n        if (isOpenSideBarStore) {\r\n            if (tradeView) {\r\n                tradeView.style.transform = `translateX(-230px)`;\r\n            }\r\n            if (cDesktop) {\r\n                cDesktop.style.transform = `translateX(-230px)`;\r\n            }\r\n        } else {\r\n            if (tradeView) {\r\n                tradeView.style.transform = `translateX(0px)`;\r\n            }\r\n            if (cDesktop) {\r\n                cDesktop.style.transform = `translateX(0px)`;\r\n            }\r\n        }\r\n    }\r\n},\r\n  beforeDestroy() {\r\n    this.$store.commit('TOGGLE_IS_OPEN_SIDEBAR', false);\r\n    const tradeView = document.querySelector('.highcharts-container');\r\n    if (tradeView) {\r\n        tradeView.style.transform = `translateX(0px)`;\r\n    }\r\n  },\r\n  methods: {\r\n\r\n\r\n    disabledBet(){\r\n        return this.isBet = !this.isBet ? true : false\r\n    },\r\n    // redrawGaugeMeter: function(t) {\r\n    //     var e = void 0;\r\n    //     (e = \"oscillators\" === t ? this.gaugeMeterOs : \"movingAverages\" === t ? this.gaugeMeterMa : this.gaugeMeterSu) && e.series && (e.series[0].points[0].update(this[t].meter.numberValue, !1), e.redraw())\r\n    // },\r\n    sendMessage(message) {\r\n        this.connection.send(JSON.stringify(message));\r\n    },\r\n\r\n    // convertTextState(t) {\r\n    //     switch (t) {\r\n    //         case \"buy\":\r\n    //             return h;\r\n    //         case \"sell\":\r\n    //             return u;\r\n    //         case \"neutral\":\r\n    //             return p\r\n    //     }\r\n    // },\r\n\r\n    replaceAll(str, find, replace) {\r\n        return Number(str.replace(new RegExp(find, 'g'), replace));\r\n    },\r\n\r\n    changeBlance(v){\r\n        if(getData.isAccount){\r\n            getData.blLive = getData.blLive - v\r\n        }else{\r\n            getData.blDemo = getData.blDemo - v\r\n        }\r\n\r\n        this.balanceForuser = getData.blDemo\r\n\r\n    },\r\n\r\n    checkBet(v){\r\n        // lấy tổng số dư của tài khoản\r\n        let sodu = getData.isAccount ? getData.blLive : getData.blDemo\r\n\r\n        this.balanceForuser = sodu\r\n\r\n        if(sodu < v) return true\r\n    },\r\n\r\n    BetBuySell(v){\r\n        this.playAudio('order');\r\n\r\n        if(getData.countDown <= 1){\r\n            return this.$vs.notify({\r\n                text:'Vui lòng đợi phiên sau!',\r\n                color:'danger',\r\n                position:'top-right',\r\n                iconPack: 'feather',\r\n                icon:'icon-x-circle'})\r\n        }\r\n        //this.isBet = false\r\n\r\n        let gAmount = this.betAmount.toString()\r\n        gAmount = this.replaceAll(gAmount, ',', '')\r\n\r\n\r\n        if(this.checkBet(gAmount)){\r\n            return this.$vs.notify({\r\n                text:'Số dư của bạn không đủ',\r\n                color:'danger',\r\n                position:'top-right',\r\n                iconPack: 'feather',\r\n                icon:'icon-x-circle'})\r\n        }\r\n\r\n\r\n        let email = getData.email\r\n        let typeAccount = getData.isAccount\r\n        let uidLive  = getData.uidLive\r\n        let uidDemo = getData.uidDemo\r\n        let uidAcc = 0\r\n\r\n        this.changeBlance(gAmount)\r\n\r\n\r\n        if(typeAccount == 1){\r\n            uidAcc = uidLive;\r\n        }else{\r\n            uidAcc = uidDemo;\r\n        }\r\n\r\n        let obj = {\r\n            email: email,\r\n            uid: uidAcc,\r\n            ref: getData.ref,\r\n            UpId: getData.upid,\r\n            typeAccount: typeAccount, // 0: demo: 0 , 1: live\r\n            betAmount: gAmount,\r\n            type: v,\r\n            mkt: getData.mkt\r\n            //idPlayer: this.thisIDPlayer\r\n        }\r\n\r\n\r\n        this.sendMessage({type: 'bet', data: obj})\r\n\r\n\r\n        let ss = this.$store.session\r\n        let timeGet = new Date().getTime();\r\n\r\n        this.betOpen.s = ss\r\n        let itp = {\r\n                \"ss\": ss,\r\n                \"time\": timeGet,\r\n                \"amt\": gAmount,\r\n                \"type\": v,\r\n                \"acc_type\": typeAccount,\r\n                \"currencyType\": \"BTC/USD\",\r\n                \"classIcon\": \"iconBitcoin\"\r\n            }\r\n\r\n        this.betOpen.l.bet[0].items.push(itp);\r\n\r\n        localStorage.setItem('stateOpen', JSON.stringify(this.betOpen));\r\n\r\n        window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\r\n            detail: {\r\n                storage: localStorage.getItem('stateOpen')\r\n            }\r\n        }));\r\n\r\n        getData.Notify = this.betOpen.l.bet[0].items.length\r\n\r\n        this.clearBAmount();\r\n\r\n\r\n        // if(v === 'buy'){\r\n\r\n        // }else{\r\n\r\n\r\n        //     return this.$vs.notify({\r\n        //         text:'Đặt lệnh thành công',\r\n        //         color:'success',\r\n        //         position:'top-right',\r\n        //         iconPack: 'feather',\r\n        //         icon:'icon-check'});\r\n        // }\r\n    },\r\n\r\n    deleteString(){\r\n        let getAmount = this.betAmount.toString();\r\n        let total  = getAmount.slice(0,-1);\r\n        let sl = total.split(\".\")\r\n        let check = sl.length-1\r\n        if(check == 1){\r\n            let g =  this.replaceAll(total, ',', '')\r\n            //console.log(g)\r\n            this.betAmount =  this.formatPrice(g, sl[1].length)\r\n            this.tinhloinhuan(g)\r\n            return\r\n        }\r\n        let g =  this.getOnlyNumberInString(total, ',', '')\r\n        this.betAmount =  this.formatPrice(g, 0)\r\n        this.tinhloinhuan(g)\r\n    },\r\n\r\n    writeBetAmountKey(v){\r\n\r\n        let getAmount = this.betAmount.toString() + v\r\n        let sl = getAmount.split(\".\")\r\n        let check = sl.length-1\r\n        if(v == '.'){\r\n            this.betAmount =  getAmount\r\n            return\r\n        }\r\n        if(check > 1) return\r\n        if(check == 1){\r\n            let g =  this.replaceAll(getAmount, ',', '')\r\n            this.betAmount =  this.formatPrice(g, sl[1].length)\r\n            this.tinhloinhuan(g)\r\n            return\r\n        }\r\n        let a = this.getOnlyNumberInString(getAmount)\r\n        this.betAmount =  this.formatPrice(a, 0)\r\n        this.tinhloinhuan(a)\r\n    },\r\n\r\n    congBetAmount(){\r\n        let getAmount = this.betAmount.toString()\r\n        let sl = getAmount.split(\".\")\r\n        let check = sl.length-1\r\n        if(check > 1) return\r\n        let tt = 0\r\n        if(check == 1){\r\n            tt =  this.replaceAll(getAmount, ',', '')\r\n            let kq = tt * 2\r\n            this.betAmount =  this.formatPrice(kq, sl[1].length)\r\n            this.tinhloinhuan(kq)\r\n            return\r\n        }\r\n        let a = this.getOnlyNumberInString(getAmount)\r\n        tt = a * 2\r\n        this.tinhloinhuan(tt)\r\n        this.betAmount = this.formatPrice(tt, 0)\r\n    },\r\n\r\n    truBetAmount(){\r\n        let getAmount = this.betAmount.toString()\r\n        let sl = getAmount.split(\".\")\r\n        let check = sl.length-1\r\n        if(check > 1) return\r\n        let tt = 0\r\n        if(check == 1){\r\n            tt =  this.replaceAll(getAmount, ',', '')\r\n            let kq = tt / 2\r\n            this.betAmount =  this.formatPrice(kq, sl[1].length)\r\n            this.tinhloinhuan(kq)\r\n            return\r\n        }\r\n        let a = this.getOnlyNumberInString(getAmount)\r\n        tt = a / 2\r\n        this.tinhloinhuan(tt)\r\n        this.betAmount = this.formatPrice(tt, 0)\r\n    },\r\n\r\n    nhapBetAmount(e){\r\n        let g = e.target.value\r\n        let check = g.split(\".\").length-1\r\n        if(check > 1) return\r\n\r\n        if(check == 1){\r\n            g = this.replaceAll(g, ',', '')\r\n            this.tinhloinhuan(g)\r\n            return\r\n        }\r\n        g = this.getOnlyNumberInString(g)\r\n        this.betAmount = this.formatPrice(g, 0)\r\n        this.tinhloinhuan(g)\r\n    },\r\n\r\n    formatPrice(value, minimum) {\r\n        var formatter = new Intl.NumberFormat('en-US', {\r\n            //style: 'currency',\r\n            //currency: '',\r\n            minimumFractionDigits: minimum\r\n        });\r\n        return formatter.format(value);\r\n    },\r\n\r\n\ttinhloinhuan(m){\r\n\t    let lb = Number(m)\r\n        lb = lb + (lb * 95 / 100)\r\n\t    // tính lợi nhuận 95%\r\n\t    this.loiNhuan = this.formatPrice(lb, 2)\r\n\t},\r\n\r\n\tgetOnlyNumberInString(t) {\r\n\r\n\t    let e = t.match(/\\d+/g)\r\n\r\n\t    return e ? Number(e.join(\"\")) : 0\r\n\t},\r\n\r\n    clearBAmount(){\r\n        this.tinhloinhuan(10)\r\n        this.betAmount = 10;\r\n    },\r\n\r\n    clickCT(amount){\r\n        let getAmount = this.betAmount.toString();\r\n        getAmount = this.betAmount.toString();\r\n\r\n        if(amount == 0){\r\n            getAmount = getData.isAccount ? getData.blLive.toString() : getData.blDemo.toString()\r\n        }\r\n\r\n        let check = getAmount.split(\".\").length-1\r\n        if(check > 1) return\r\n\r\n        if(check == 1){\r\n            getAmount = this.replaceAll(getAmount, ',', '')\r\n            let tt = getAmount + amount;\r\n            this.tinhloinhuan(tt)\r\n            this.betAmount = this.formatPrice(tt, 2);\r\n            return\r\n        }\r\n        let aB = this.getOnlyNumberInString(getAmount);\r\n        let tt = aB + amount;\r\n        this.betAmount = this.formatPrice(tt, 0);\r\n        this.tinhloinhuan(tt)\r\n\r\n    },\r\n\r\n    editUser() {\r\n\r\n      //this.sidebarData = data\r\n      this.toggleDataSidebar(true)\r\n\r\n    },\r\n\r\n    toggleDataSidebar(val=false) {\r\n      this.addNewDataSidebar = val\r\n    },\r\n\r\n    updateBarChart(boPrice) {\r\n        var chartInstance = chartGet;\r\n        try{\r\n            var lastCandle = chartInstance.series[1].points[chartInstance.series[1].points.length - 1]\r\n            var color = this.getColor(boPrice.open, boPrice.close);\r\n            if(lastCandle.x === boPrice.date) {\r\n                lastCandle.update({\r\n                    x: boPrice.date,\r\n                    y: boPrice.volume,\r\n                    color: color\r\n                }, true);\r\n            } else {\r\n                chartInstance.series[1].addPoint({\r\n                    x: boPrice.date,\r\n                    y: boPrice.volume,\r\n                    color: color\r\n                }, true, true);\r\n            }\r\n        }\r\n        catch(err) {\r\n            console.log(err);\r\n        } finally {\r\n            //\r\n        }\r\n\r\n    },\r\n\r\n\r\n    updateCandleStickChart(boPrice) {\r\n                var chartInstance = chartGet;\r\n\r\n                try{\r\n\r\n                    var lastCandle = chartInstance.series[0].points[chartInstance.series[0].points.length - 1]\r\n                    var color = this.getColor(boPrice.open, boPrice.close);\r\n\r\n                    var counter = Number(boPrice.candleClose)\r\n\r\n                    var o = {\r\n                        x: boPrice.date,\r\n                        open: boPrice.open.toFixed(2)*1,\r\n                        high: boPrice.high.toFixed(2)*1,\r\n                        low: boPrice.low.toFixed(2)*1,\r\n                        close: boPrice.close.toFixed(2)*1,\r\n                        vol: boPrice.volume.toFixed(2)*1,\r\n                        color: color\r\n                    };\r\n                    if(lastCandle.x === boPrice.date) {\r\n                        lastCandle.update(o, true);\r\n                    } else {\r\n                        chartInstance.series[0].addPoint(o, true, true);\r\n\r\n                        // if(listData.length >= 200){\r\n                        //     listData.shift();\r\n                        // }\r\n                        //console.log(boPrice);\r\n                        listData.push(boPrice);\r\n                        let begin = 0;\r\n                        //console.log(listData);\r\n                        const { dataMax } = chartInstance.xAxis[0].getExtremes();\r\n\r\n                        if(deviceVersion !== 'pc') {\r\n                            begin = this.setSizeStock(listData);\r\n                            chartGet.xAxis[0].setExtremes(listData[begin+40]['date'], dataMax, false);\r\n                            chartGet.redraw();\r\n                        }else{\r\n                            let c = listData.length;\r\n                            chartGet.xAxis[0].setExtremes(listData[c-90]['date'], dataMax, false);\r\n                            chartGet.redraw();\r\n                        }\r\n\r\n                    }\r\n                    chartInstance.xAxis[0].options.plotLines[0].value = boPrice.date;\r\n                    chartInstance.yAxis[0].options.plotLines[0].value = boPrice.close;\r\n\r\n                    let f = chartInstance.yAxis[0].plotLinesAndBands[0];\r\n\r\n                    f.label && f.label.attr({\r\n                        text : '<div class=\"plotlineChart flex flex-col\"><span class=\"price\">' + boPrice.close + '</span><span class=\"time self-end\">00:' + (counter > 9 ? counter : \"0\" + counter) + '</span></div>'\r\n                    });\r\n\r\n                    if(boPrice.type === 'order'){\r\n                        this.isOrder = true\r\n                        this.isBet = true\r\n                        getData.textTimeDown = 'Hãy đặt lệnh'\r\n\r\n                    }else{\r\n                        this.isOrder = false\r\n                        this.isBet = false\r\n                        getData.textTimeDown = 'Chờ kết quả'\r\n\r\n                    }\r\n\r\n                    getData.countDown = (counter > 9 ? counter : \"0\" + counter)\r\n\r\n                }\r\n                catch{\r\n\r\n                }\r\n\r\n    },\r\n\r\n    getColor(openPrice, closePrice) {\r\n        return openPrice < closePrice ? UP_COLOR : DOWN_COLOR\r\n    },\r\n\r\n    onReceiveSocketData(boPrice) {\r\n        this.updateCandleStickChart(boPrice);\r\n        this.updateBarChart(boPrice);\r\n    },\r\n\r\n    StaOscillators(e){\r\n\r\n        try{\r\n            let chart = this.$refs.chartOs.chart\r\n\r\n            let left = chart.series[0].points[0], leftVal\r\n            //Oscillators\r\n            this.NumOscBUY = e.b\r\n            this.NumOscSELL = e.s\r\n            this.NumOscNeutral = e.m\r\n\r\n            if(e.m > e.s && e.m > e.b || e.m === e.s &&  e.m === e.b){\r\n                this.textTitleOs = 'NEUTRAL'\r\n                left.update(0, true);\r\n                chart.redraw();\r\n            }\r\n            if(e.s > e.b){\r\n                leftVal = -35\r\n                this.textTitleOs = 'SELL'\r\n                if(e.s >= 5) leftVal = -70, this.textTitleOs = 'STRONG SELL'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }else if(e.s < e.b){\r\n                leftVal = 35\r\n                this.textTitleOs = 'BUY'\r\n                if(e.b >= 5) leftVal = 70, this.textTitleOs = 'STRONG BUY'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }\r\n        }catch{}\r\n\r\n\r\n    },\r\n\r\n    StaSummary(e){\r\n\r\n        try{\r\n            let chart = this.$refs.chartSu.chart\r\n\r\n            let left = chart.series[0].points[0], leftVal\r\n\r\n            //Summary\r\n            this.NumSumBUY = e.b\r\n            this.NumSumSELL = e.s\r\n            this.NumSumNeutral = e.m\r\n\r\n            if(e.m > e.s && e.m > e.b || e.m === e.s &&  e.m === e.b){\r\n                this.textTitleSu = 'NEUTRAL'\r\n                left.update(0, true);\r\n                chart.redraw();\r\n                return\r\n            }\r\n            if(e.s > e.b){\r\n                leftVal = -35\r\n                this.textTitleSu = 'SELL'\r\n                if(e.s >= 5) leftVal = -70, this.textTitleSu = 'STRONG SELL'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }else if(e.s < e.b){\r\n                leftVal = 35\r\n                this.textTitleSu = 'BUY'\r\n                if(e.b >= 5) leftVal = 70, this.textTitleSu = 'STRONG BUY'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }\r\n        }catch{}\r\n\r\n    },\r\n\r\n    StaMovingAverages(e){\r\n\r\n        try\r\n        {\r\n            let chart = this.$refs.chartMa.chart\r\n            let left = chart.series[0].points[0], leftVal\r\n            //Moving\r\n\r\n            this.NumMovBUY = e.b\r\n            this.NumMovSELL = e.s\r\n            this.NumMovNeutral = e.m\r\n\r\n            if(e.m > e.s && e.m > e.b || e.m === e.s &&  e.m === e.b){\r\n                this.textTitleMa = 'NEUTRAL'\r\n                left.update(0, true);\r\n                chart.redraw();\r\n                return\r\n            }\r\n            if(e.s > e.b){\r\n                leftVal = -35\r\n                this.textTitleMa = 'SELL'\r\n                if(e.s >= 5) leftVal = -70, this.textTitleMa = 'STRONG SELL'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }else if(e.s < e.b){\r\n                leftVal = 35\r\n                this.textTitleMa = 'BUY'\r\n                if(e.b >= 5) leftVal = 70, this.textTitleMa = 'STRONG BUY'\r\n                left.update(leftVal, true);\r\n                chart.redraw();\r\n            }\r\n        }catch{}\r\n\r\n    },\r\n\r\n    // setSizeStock(){\r\n    setSizeStock(data){\r\n        var chartWidth = parseInt($('.chartBox').width());\r\n\r\n        let numBar = Math.floor((chartWidth - 90) / 17.44); //90 17.44 13.44\r\n        if(numBar < data.length) {\r\n            return data.length - numBar - 40;\r\n        }\r\n\r\n        // var chartWidth = parseInt($('.chartBox').width());\r\n        // if (chartWidth < 400) {\r\n        //     return 65;\r\n        // }\r\n\r\n        // if (chartWidth > 400 && chartWidth < 800) {\r\n        //     return 95;\r\n        // }\r\n    },\r\n\r\n    getDataDefaultGet(get){\r\n\r\n        let data = get;\r\n        ohlcStock = [], volumeStock = [];\r\n\r\n        var begin = 0;\r\n\r\n        if(deviceVersion !== 'pc') {\r\n            begin = this.setSizeStock(data);\r\n        }else{\r\n            let getWidth = parseInt($('body').width());\r\n            if(getWidth >= 1260 && getWidth <= 1500){\r\n                begin = 55;\r\n            }\r\n            if(getWidth >= 1500 && getWidth <= 1600){\r\n                begin = 45;\r\n            }\r\n            if(getWidth >= 820 &&  getWidth <= 1260){\r\n                begin = 75;\r\n            }\r\n            if (getWidth > 1500) {\r\n                begin = 35;\r\n            }\r\n        }\r\n\r\n        for (var i = begin; i < data.length; i++) {\r\n            var _o = {\r\n                    x: data[i].date, // the date\r\n                    open: data[i].open, // open\r\n                    high: data[i].high, // high\r\n                    low: data[i].low, // low\r\n                    close: data[i].close, // close\r\n                    vol: data[i].volume // volume\r\n                };\r\n                ohlcStock.push(_o);\r\n\r\n                volumeStock.push({\r\n                    x: data[i].date, // the date\r\n                    y: data[i].volume, // the volume\r\n                    color: data[i].open < data[i].close ? UP_COLOR : DOWN_COLOR\r\n                });\r\n\r\n        }\r\n        stockChart.series[0].data = ohlcStock;\r\n        stockChart.series[1].data = volumeStock;\r\n        this.chartOptionsStock = stockChart;\r\n\r\n        let ao = setInterval(() => {\r\n            if(chartGet != ''){\r\n                clearInterval(ao);\r\n                const { dataMax } = chartGet.xAxis[0].getExtremes(); //dataMin\r\n                if(deviceVersion !== 'pc') {\r\n                    chartGet.xAxis[0].setExtremes(data[begin+40]['date'], dataMax, false);\r\n                    chartGet.redraw();\r\n                }else{\r\n                    let c = data.length;\r\n                    chartGet.xAxis[0].setExtremes(data[c-90]['date'], dataMax, false);\r\n                    chartGet.redraw();\r\n                }\r\n\r\n            }\r\n        }, 100);\r\n    },\r\n\r\n    setChartHeight() {\r\n\r\n\r\n        if(window.innerWidth > 768){\r\n            deviceVersion = 'pc'\r\n        }else{\r\n            deviceVersion = 'mobile'\r\n        }\r\n\r\n        //$('.w-18').css('max-width', $('#analysis-wrapper').width() / 4)\r\n        let setS = setInterval(() => {\r\n            let w = $('.chartBox').width();\r\n            let h = $('.chartBox').height();\r\n            if(!!w && !!h){\r\n                let cH = this.$refs.chartStock.chart.chartHeight;\r\n                if(cH !== h){\r\n                    let chartInstance = this.$refs.chartStock.chart;\r\n                    chartInstance.setSize(w, h, true);\r\n                    chartGet = chartInstance\r\n                }else{\r\n                    clearInterval(setS);\r\n                }\r\n            }\r\n        }, 600);\r\n\r\n\r\n        //this.$forceUpdate();\r\n    },\r\n\r\n    onWindowLoad(){\r\n\r\n        let uidLive  = getData.uidLive\r\n        let uidDemo = getData.uidDemo\r\n        let uidAcc = 0\r\n\r\n        let acc = localStorage.getItem('BO_BALANCE_TYPE')\r\n        if(acc == 'LIVE'){\r\n            getData.isAccount = 1\r\n        }else{\r\n            getData.isAccount = 0\r\n        }\r\n\r\n        getData.isAccount ? uidAcc = uidLive : uidAcc = uidDemo\r\n\r\n        this.sendMessage({type: 'accountDetail', data: {uid: uidAcc, email: getData.email}});\r\n\r\n        let notify = JSON.parse(localStorage.getItem('stateOpen'));\r\n        if(notify){\r\n             getData.Notify = notify.l.bet[0].items.length\r\n        }\r\n\r\n    },\r\n\r\n    addSound(){\r\n        createjs.Sound.alternateExtensions = [\"mp3\"];\r\n        createjs.Sound.registerSounds([\r\n            {\r\n                id: \"win\",\r\n                src: require('@/assets/sounds/win-n.mp3')\r\n            }, {\r\n                id: \"lose\",\r\n                src: require('@/assets/sounds/lose-n.mp3')\r\n            }, {\r\n                id: \"order\",\r\n                src: require('@/assets/sounds/order-n.mp3')\r\n            }\r\n        ]);\r\n    },\r\n\r\n\r\n    playAudio(v){\r\n        let checkSound = localStorage.getItem('SOUND');\r\n        if(checkSound === 'false') return;\r\n        createjs.Sound.play(v);\r\n\r\n        // let sound;\r\n        // if(v == 'win'){\r\n        //    // sound = require('@/assets/sounds/win-n.mp3');\r\n        // }else if(v == 'lose'){\r\n        //   //  sound = require('@/assets/sounds/lose-n.mp3');\r\n        // }else if(v == 'order'){\r\n        //    // sound = require('@/assets/sounds/order-n.mp3');\r\n        // }\r\n        // var audio = new Audio(sound);\r\n        // audio.play();\r\n\r\n\r\n\r\n    },\r\n\r\n    getUserInfo(){\r\n        AuthenticationService.getInfoUser()\r\n        .then((res) => {\r\n\r\n            if(res.data.success == 1){\r\n\r\n                let gData = res.data.data\r\n\r\n                getData.uid= gData.id,\r\n                getData.email= gData.email,\r\n                getData.profile_image= gData.profile_image,\r\n                getData.displayName= gData.nick_name,\r\n                getData.uidLive= gData.order[1].u_id,\r\n                getData.uidDemo= gData.order[0].u_id,\r\n                getData.vip= gData.vip,\r\n                getData.vip_lv= gData.level_vip,\r\n                getData.pen_commiss= gData.pending_commission,\r\n                getData.ref= gData.ref,\r\n                getData.c2fa= gData.fa2,\r\n                getData.id_front= gData.id_front,\r\n                getData.id_back= gData.id_back,\r\n                getData.first_name= gData.first_name,\r\n                getData.last_name= gData.last_name,\r\n                getData.verify= gData.verify,\r\n                getData.num_secu= gData.num_secury,\r\n                getData.country= gData.c,\r\n                getData.blLive = gData.order[1].balance\r\n                getData.blDemo = gData.order[0].balance\r\n                getData.balance = gData.balance,\r\n                getData.mkt = gData.mkt\r\n\r\n                localStorage.setItem('INFO', JSON.stringify(gData))\r\n            }else{\r\n                window.location.href = window.location.origin + '/login'\r\n            }\r\n        });\r\n    }\r\n\r\n  },\r\n  created() {\r\n\r\n\r\n\r\n    //let token = localStorage.getItem('token')\r\n    //this.$store.dispatch('setToken', token)\r\n\r\n\r\n    let acc = localStorage.getItem('BO_BALANCE_TYPE')\r\n    if(acc == 'LIVE'){\r\n      getData.isAccount = 1\r\n    }else{\r\n      getData.isAccount = 0\r\n    }\r\n\r\n    // lấy tổng số dư của tài khoản\r\n    this.balanceForuser = getData.isAccount ? getData.blLive : getData.blDemo\r\n\r\n    if(!connected){\r\n\r\n        connected = true;\r\n\r\n        this.connection = new WebSocket(SETTINGS.BASE_URL_SOCKET);\r\n\r\n        //this.$store.connected = this.connection\r\n\r\n        this.connection.onopen = function() {\r\n            //console.log(\"Successfully connected to the echo websocket server...\")\r\n            this.onWindowLoad();\r\n            this.getUserInfo();\r\n        }.bind(this);\r\n\r\n        this.connection.onmessage = function(event) {\r\n            let data = JSON.parse(event.data)\r\n\r\n            let dl = data.data;\r\n\r\n\r\n            if(data.type === 'getListDauTien'){\r\n\r\n                if(!!dl){\r\n                    listData = dl;\r\n                    this.getDataDefaultGet(dl);\r\n                }\r\n\r\n            }\r\n            if(data.type === 'getidPlayer'){\r\n                this.thisIDPlayer = data.data;\r\n            }\r\n            if(data.type === 'allData'){\r\n                this.onReceiveSocketData(dl);\r\n            }\r\n            if(data.type === 'transVolum'){\r\n                if(dl.nbuy){\r\n                    this.CSBUY = dl.ptbuy\r\n                    this.CSSELL = dl.ptsell\r\n                }\r\n            }\r\n            if(data.type === 'checkBet'){\r\n                this.isBet = true\r\n                return this.$vs.notify({\r\n                    text:'Đặt lệnh thành công',\r\n                    color:'success',\r\n                    position:'top-right',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'});\r\n            }\r\n            if(data.type === 'kq'){\r\n                //console.log(dl);\r\n                if(dl.kq == 'win'){\r\n                    let mn = dl.money\r\n\r\n                    this.playAudio('win');\r\n\r\n                    if(getData.isAccount){\r\n                        getData.blLive = getData.blLive + mn\r\n                    }else{\r\n                        getData.blDemo = getData.blDemo + mn\r\n                    }\r\n\r\n                    this.moneyWin = this.formatPrice(mn, 2)\r\n                    this.isWinPop = true\r\n                    setTimeout(() => {\r\n                        this.isWinPop = false\r\n                    }, 3000)\r\n                }else{\r\n                    this.playAudio('lose');\r\n                }\r\n                // xóa notice = 0\r\n                getData.Notify = 0;\r\n                this.betOpen.l.bet[0].items = [];\r\n                localStorage.removeItem('stateOpen');\r\n                window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\r\n                    detail: {\r\n                        storage: undefined\r\n                    }\r\n                }));\r\n            }\r\n            if(data.type === 'mess'){\r\n                if(dl.type == 'bet'){\r\n                    return this.$vs.notify({\r\n                        text: dl.mess,\r\n                        color: dl.style,\r\n                        position:'top-right',\r\n                        iconPack: 'feather',\r\n                        icon:'icon-x-circle'})\r\n                }\r\n\r\n                if(dl.type  === 'disAccount'){\r\n                    // đăng xuất tài khoản\r\n                    setTimeout(() => {\r\n                        localStorage.removeItem('tokenUser');\r\n                        localStorage.removeItem('INFO');\r\n                        getData.Notify = 0;\r\n                        localStorage.removeItem('stateOpen');\r\n                        window.location.href = window.location.origin + '/login';\r\n                    }, 3000);\r\n                    return this.$vs.notify({\r\n                            text: dl.mess,\r\n                            color: dl.style,\r\n                            position:'top-right',\r\n                            iconPack: 'feather',\r\n                            icon:'icon-x-circle'});\r\n                }\r\n\r\n                if(dl.type  === 'reloadAccount'){\r\n                    location.reload();\r\n                }\r\n            }\r\n            if(data.type === 'static'){\r\n\r\n                let indicato = data.load\r\n\r\n\r\n\r\n                this.StaOscillators(indicato.Oscillators)\r\n                this.StaSummary(indicato.Summary)\r\n                this.StaMovingAverages(indicato.Moving)\r\n\r\n                //this.totalBuyStatic = dl.cbuy;\r\n                //this.totalSellStatic = dl.csell;\r\n\r\n                let sta = dl.static\r\n\r\n                let stl = sta.length\r\n                let istart = 0;\r\n                let csl = 40;\r\n                this.totalBuyStatic = this.totalSellStatic = 0;\r\n                //if(isMobile){ // rs lại tổng số\r\n                //    this.totalBuyStatic = this.totalSellStatic = 0;\r\n                //}\r\n                if(isMobile && stl > 60){\r\n                    //let sl = stl - csl;\r\n                    let sl = 0;\r\n                    if(stl > 60 && stl <= 80){\r\n                        sl = 20;\r\n                    }else if(stl > 80){\r\n                        sl = 40;\r\n                    }\r\n                    for(let x = 0; x < sl; x++){\r\n                       sta.shift();\r\n                    }\r\n                    stl = sta.length;\r\n                }\r\n                let list = $('.historyBox');\r\n                $('.historyBox .item').removeClass('bg-green bg-red');\r\n                for(let i = istart; i < stl; i++){\r\n                    let item = i;\r\n                    // let l1 = $('.historyBox .list1')\r\n                    // let l2 = $('.historyBox .list2')\r\n                    // let l3 = $('.historyBox .list3')\r\n                    // let l4 = $('.historyBox .list4')\r\n                    // let l5 = $('.historyBox .list5')\r\n                    if(i < 20){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 19 && i < 40){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 39 && i < 60){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 59 && i < 80){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 79 && i < 100){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }.bind(this);\r\n\r\n        this.connection.onclose = () => {\r\n            // xóa notice = 0\r\n            getData.Notify = 0;\r\n            this.betOpen.l.bet[0].items = [];\r\n            localStorage.removeItem('stateOpen');\r\n        }\r\n\r\n        //window.addEventListener(\"load\", this.onWindowLoad);\r\n\r\n    }else if (typeof this.connection === 'undefined') {\r\n        this.connection = new WebSocket(SETTINGS.BASE_URL_SOCKET);\r\n        this.connection.onopen = function() {\r\n            //console.log(\"Successfully connected to the echo websocket server...\")\r\n            this.onWindowLoad();\r\n            this.getUserInfo();\r\n        }.bind(this);\r\n\r\n        this.connection.onmessage = function(event) {\r\n            let data = JSON.parse(event.data)\r\n\r\n            let dl = data.data;\r\n\r\n\r\n            if(data.type === 'getListDauTien'){\r\n\r\n                if(!!dl){\r\n                    listData = dl;\r\n                    this.getDataDefaultGet(dl);\r\n                }\r\n\r\n            }\r\n            if(data.type === 'getidPlayer'){\r\n                this.thisIDPlayer = data.data;\r\n            }\r\n            if(data.type === 'allData'){\r\n                this.onReceiveSocketData(dl);\r\n            }\r\n            if(data.type === 'transVolum'){\r\n                if(dl.nbuy){\r\n                    this.CSBUY = dl.ptbuy\r\n                    this.CSSELL = dl.ptsell\r\n                }\r\n            }\r\n            if(data.type === 'checkBet'){\r\n                this.isBet = true\r\n                return this.$vs.notify({\r\n                    text:'Đặt lệnh thành công',\r\n                    color:'success',\r\n                    position:'top-right',\r\n                    iconPack: 'feather',\r\n                    icon:'icon-check'});\r\n            }\r\n            if(data.type === 'kq'){\r\n                //console.log(dl);\r\n                if(dl.kq == 'win'){\r\n                    let mn = dl.money\r\n\r\n                    this.playAudio('win');\r\n\r\n                    if(getData.isAccount){\r\n                        getData.blLive = getData.blLive + mn\r\n                    }else{\r\n                        getData.blDemo = getData.blDemo + mn\r\n                    }\r\n\r\n                    this.moneyWin = this.formatPrice(mn, 2)\r\n                    this.isWinPop = true\r\n                    setTimeout(() => {\r\n                        this.isWinPop = false\r\n                    }, 3000)\r\n                }else{\r\n                    this.playAudio('lose');\r\n                }\r\n                // xóa notice = 0\r\n                getData.Notify = 0;\r\n                this.betOpen.l.bet[0].items = [];\r\n                localStorage.removeItem('stateOpen');\r\n                window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\r\n                    detail: {\r\n                        storage: undefined\r\n                    }\r\n                }));\r\n            }\r\n            if(data.type === 'mess'){\r\n                if(dl.type == 'bet'){\r\n                    return this.$vs.notify({\r\n                        text: dl.mess,\r\n                        color: dl.style,\r\n                        position:'top-right',\r\n                        iconPack: 'feather',\r\n                        icon:'icon-x-circle'})\r\n                }\r\n\r\n                if(dl.type  === 'disAccount'){\r\n                    // đăng xuất tài khoản\r\n                    setTimeout(() => {\r\n                        localStorage.removeItem('tokenUser');\r\n                        localStorage.removeItem('INFO');\r\n                        getData.Notify = 0;\r\n                        localStorage.removeItem('stateOpen');\r\n                        window.location.href = window.location.origin + '/login';\r\n                    }, 3000);\r\n                    return this.$vs.notify({\r\n                            text: dl.mess,\r\n                            color: dl.style,\r\n                            position:'top-right',\r\n                            iconPack: 'feather',\r\n                            icon:'icon-x-circle'});\r\n                }\r\n\r\n                if(dl.type  === 'reloadAccount'){\r\n                    location.reload();\r\n                }\r\n            }\r\n            if(data.type === 'static'){\r\n\r\n                let indicato = data.load\r\n\r\n\r\n\r\n                this.StaOscillators(indicato.Oscillators)\r\n                this.StaSummary(indicato.Summary)\r\n                this.StaMovingAverages(indicato.Moving)\r\n\r\n                //this.totalBuyStatic = dl.cbuy;\r\n                //this.totalSellStatic = dl.csell;\r\n\r\n                let sta = dl.static\r\n\r\n                let stl = sta.length\r\n                let istart = 0;\r\n                let csl = 40;\r\n                this.totalBuyStatic = this.totalSellStatic = 0;\r\n                //if(isMobile){ // rs lại tổng số\r\n                //    this.totalBuyStatic = this.totalSellStatic = 0;\r\n                //}\r\n                if(isMobile && stl > 60){\r\n                    //let sl = stl - csl;\r\n                    let sl = 0;\r\n                    if(stl > 60 && stl <= 80){\r\n                        sl = 20;\r\n                    }else if(stl > 80){\r\n                        sl = 40;\r\n                    }\r\n                    for(let x = 0; x < sl; x++){\r\n                       sta.shift();\r\n                    }\r\n                    stl = sta.length;\r\n                }\r\n                let list = $('.historyBox');\r\n                $('.historyBox .item').removeClass('bg-green bg-red');\r\n                for(let i = istart; i < stl; i++){\r\n                    let item = i;\r\n                    // let l1 = $('.historyBox .list1')\r\n                    // let l2 = $('.historyBox .list2')\r\n                    // let l3 = $('.historyBox .list3')\r\n                    // let l4 = $('.historyBox .list4')\r\n                    // let l5 = $('.historyBox .list5')\r\n                    if(i < 20){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 19 && i < 40){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 39 && i < 60){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 59 && i < 80){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                    if(i > 79 && i < 100){\r\n                        if(sta[i] == 'buy'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-green')\r\n                            this.totalBuyStatic++;\r\n                        }else if(sta[i] == 'sell'){\r\n                            list.find('.item:eq('+item+')').addClass('bg-red')\r\n                            this.totalSellStatic++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }.bind(this);\r\n\r\n        this.connection.onclose = () => {\r\n            // xóa notice = 0\r\n            getData.Notify = 0;\r\n            this.betOpen.l.bet[0].items = [];\r\n            localStorage.removeItem('stateOpen');\r\n        }\r\n    } else {\r\n        //this.sendMessage({type: 'getListData'});\r\n        // Fix reload index page\r\n        // this.$router.go(this.$router.currentRoute);\r\n    }\r\n\r\n\r\n  },\r\n  mounted() {\r\n    this.addSound();\r\n    window.addEventListener(\"resize\", this.setChartHeight)\r\n    //window.addEventListener(\"load\", this.setChartHeight);\r\n\r\n    this.setChartHeight();\r\n\r\n    // this.isMounted = true;\r\n\r\n    // const chart = this.$children[1].$refs.highcharts\r\n    // console.log(chart);\r\n    //setTimeout(() => {\r\n\r\n            // let chart = this.$refs.chartOs.chart\r\n            // if (chart.series) { // the chart may be destroyed\r\n            //     timer = setInterval(() => {\r\n            //         var left = chart.series[0].points[0],\r\n            //             //right = chart.series[1].points[0],\r\n            //             leftVal,\r\n            //             //rightVal,\r\n            //             inc = (Math.random() * 200) - 85;\r\n\r\n            //         leftVal = left.y + inc;\r\n            //         //console.log(left.y)\r\n            //         //rightVal = leftVal + inc / 3;\r\n            //         if (leftVal < -85 || leftVal > 85) {\r\n            //             leftVal = left.y - inc;\r\n            //         }\r\n            //         // if (rightVal < -20 || rightVal > 6) {\r\n            //         //     rightVal = leftVal;\r\n            //         // }\r\n            //         //console.log(leftVal)\r\n            //         left.update(leftVal, false);\r\n            //         //right.update(rightVal, false);\r\n            //         chart.redraw();\r\n            //     }, 3000)\r\n            // }\r\n\r\n\r\n    //}, 3000)\r\n\r\n    this.$store.commit('SET_IS_RENDER_TRADE_INDEX', true);\r\n  },\r\n  destroyed() {\r\n\r\n    //window.removeEventListener(\"resize\", this.setChartHeight);\r\n\r\n    if (timer) {\r\n      clearInterval(timer)\r\n    }\r\n    this.$store.commit('SET_IS_RENDER_TRADE_INDEX', false);\r\n    this.connection.close();\r\n  },\r\n}\r\n",null]}