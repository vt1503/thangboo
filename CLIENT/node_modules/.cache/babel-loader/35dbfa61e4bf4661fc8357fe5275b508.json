{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/customizer/TheCustomizer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/customizer/TheCustomizer.vue","mtime":1572508396000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nexport default {\n  props: {\n    footerType: {\n      type: String,\n      required: true\n    },\n    hideScrollToTop: {\n      type: Boolean,\n      required: true\n    },\n    navbarType: {\n      type: String,\n      required: true\n    },\n    navbarColor: {\n      type: String,\n      required: true,\n      default: \"#fff\"\n    },\n    routerTransition: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      active: false,\n      customPrimaryColor: '#3DC9B3',\n      customNavbarColor: '#3DC9B3',\n      routerTransitionsList: [{\n        text: 'Zoom Fade',\n        value: 'zoom-fade'\n      }, {\n        text: 'Slide Fade',\n        value: 'slide-fade'\n      }, {\n        text: 'Fade Bottom',\n        value: 'fade-bottom'\n      }, {\n        text: 'Fade',\n        value: 'fade'\n      }, {\n        text: 'Zoom Out',\n        value: 'zoom-out'\n      }, {\n        text: 'None',\n        value: 'none'\n      }],\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: .60\n      },\n      themeColors: ['#7367F0', '#28C76F', '#EA5455', '#FF9F43', '#1E1E1E']\n    };\n  },\n  watch: {\n    layoutType: function layoutType(val) {\n      // Reset unsupported options\n      if (val === \"horizontal\") {\n        this.themeMode === \"semi-dark\" ? this.themeMode = \"light\" : null;\n        this.navbarType === \"hidden\" ? this.navbarTypeLocal = \"floating\" : null;\n        this.$emit('updateNavbarColor', \"#fff\");\n      }\n    }\n  },\n  computed: {\n    footerTypeLocal: {\n      get: function get() {\n        return this.footerType;\n      },\n      set: function set(val) {\n        this.$emit('updateFooter', val);\n      }\n    },\n    hideScrollToTopLocal: {\n      get: function get() {\n        return this.hideScrollToTop;\n      },\n      set: function set(val) {\n        this.$emit('toggleHideScrollToTop', val);\n      }\n    },\n    navbarColorInitial: function navbarColorInitial() {\n      return this.$store.state.theme === 'dark' ? '#10163a' : '#fff';\n    },\n    navbarColorOptionClasses: function navbarColorOptionClasses() {\n      var _this = this;\n\n      return function (color) {\n        var classes = {};\n        if (color == _this.navbarColorLocal) classes['shadow-outline'] = true;\n        if (_this.navbarTypeLocal == 'static') classes['cursor-not-allowed'] = true;\n        return classes;\n      };\n    },\n    navbarColorLocal: {\n      get: function get() {\n        return this.navbarColor;\n      },\n      set: function set(val) {\n        if (this.navbarType == 'static') return;\n        this.$emit('updateNavbarColor', val);\n      }\n    },\n    navbarTypeLocal: {\n      get: function get() {\n        return this.navbarType;\n      },\n      set: function set(val) {\n        this.$emit('updateNavbar', val);\n      }\n    },\n    layoutType: {\n      get: function get() {\n        return this.$store.state.mainLayoutType;\n      },\n      set: function set(val) {\n        this.$store.commit(\"UPDATE_MAIN_LAYOUT_TYPE\", val);\n      }\n    },\n    primaryColor: {\n      get: function get() {\n        return this.$store.state.themePrimaryColor;\n      },\n      set: function set(val) {\n        this.$store.commit('UPDATE_PRIMARY_COLOR', val);\n      }\n    },\n    reduced_sidebar: {\n      get: function get() {\n        return this.$store.state.reduceButton;\n      },\n      set: function set(val) {\n        this.$store.commit('TOGGLE_REDUCE_BUTTON', val);\n      }\n    },\n    routerTransitionLocal: {\n      get: function get() {\n        return this.routerTransition;\n      },\n      set: function set(val) {\n        this.$emit('updateRouterTransition', val);\n      }\n    },\n    rtl: {\n      get: function get() {\n        return this.$vs.rtl;\n      },\n      set: function set(val) {\n        this.$vs.rtl = val;\n      }\n    },\n    themeMode: {\n      get: function get() {\n        return this.$store.state.theme;\n      },\n      set: function set(val) {\n        this.$store.dispatch('updateTheme', val);\n      }\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    updatePrimaryColor: function updatePrimaryColor(color) {\n      this.primaryColor = color;\n      this.$vs.theme({\n        primary: color\n      });\n    }\n  },\n  components: {\n    VuePerfectScrollbar: VuePerfectScrollbar\n  }\n};",null]}