{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/components/excel/ImportExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/components/excel/ImportExcel.vue","mtime":1570195276000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport XLSX from 'xlsx';\nexport default {\n  props: {\n    onSuccess: {\n      type: Function,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      excelData: {\n        header: null,\n        results: null,\n        meta: null\n      }\n    };\n  },\n  methods: {\n    generateData: function generateData(_ref) {\n      var header = _ref.header,\n          results = _ref.results,\n          meta = _ref.meta;\n      this.excelData.header = header;\n      this.excelData.results = results;\n      this.excelData.meta = meta;\n      this.onSuccess && this.onSuccess(this.excelData);\n    },\n    getHeaderRow: function getHeaderRow(sheet) {\n      var headers = [];\n      var range = XLSX.utils.decode_range(sheet['!ref']);\n      var C;\n      var R = range.s.r;\n      /* start in the first row */\n\n      for (C = range.s.c; C <= range.e.c; ++C) {\n        /* walk every column in the range */\n        var cell = sheet[XLSX.utils.encode_cell({\n          c: C,\n          r: R\n        })];\n        /* find the cell in the first row */\n\n        var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n        headers.push(hdr);\n      }\n\n      return headers;\n    },\n    handleDragover: function handleDragover(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n    },\n    handleDrop: function handleDrop(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var files = e.dataTransfer.files;\n\n      if (files.length !== 1) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only support uploading one file!',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        });\n        return;\n      }\n\n      var rawFile = files[0]; // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only supports upload .xlsx, .xls, .csv suffix files',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        });\n        return false;\n      }\n\n      this.uploadFile(rawFile);\n    },\n    readerData: function readerData(rawFile) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, {\n            type: 'array'\n          });\n          var firstSheetName = workbook.SheetNames[0];\n          var worksheet = workbook.Sheets[firstSheetName];\n\n          var header = _this.getHeaderRow(worksheet);\n\n          var results = XLSX.utils.sheet_to_json(worksheet);\n          var meta = {\n            sheetName: firstSheetName\n          };\n\n          _this.generateData({\n            header: header,\n            results: results,\n            meta: meta\n          });\n\n          resolve();\n        };\n\n        reader.readAsArrayBuffer(rawFile);\n      });\n    },\n    handleClick: function handleClick(e) {\n      var files = e.target.files;\n      var rawFile = files[0];\n      if (!rawFile) return;\n      this.uploadFile(rawFile);\n    },\n    isExcel: function isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name);\n    },\n    uploadFile: function uploadFile(file) {\n      this.$refs['fileInput'].value = null; // fix can't select the same excel\n\n      this.readerData(file);\n    }\n  }\n};",null]}