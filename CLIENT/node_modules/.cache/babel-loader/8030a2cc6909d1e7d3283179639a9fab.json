{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js??ref--13-0!/Users/tule/Code/winbo.trade/src/fake-db/data/user/index.js","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/fake-db/data/user/index.js","mtime":1617200720000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport mock from \"@/fake-db/mock.js\";\nimport jwt from 'jsonwebtoken';\nvar data = {\n  checkpointReward: {\n    userName: \"John\",\n    progress: \"57.6%\"\n  },\n  users: [{\n    uid: 34,\n    displayName: \"Sky Software\",\n    password: \"manhduc\",\n    photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n    email: \"admin\",\n    phoneNumber: null\n  }]\n};\nvar jwtConfig = {\n  \"secret\": \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n  \"expireTime\": 8000\n};\nmock.onPost(\"/api/auth/login\").reply(function (request) {\n  var _JSON$parse = JSON.parse(request.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  var error = \"Something went wrong\";\n  var user = data.users.find(function (user) {\n    return user.email === email && user.password === password;\n  });\n\n  if (user) {\n    try {\n      var accessToken = jwt.sign({\n        id: user.uid\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var userData = Object.assign({}, user, {\n        providerId: \"jwt\"\n      });\n      var response = {\n        userData: userData,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = \"Email Or Password Invalid\";\n  }\n\n  return [200, {\n    error: error\n  }];\n});\nmock.onPost('/api/auth/register').reply(function (request) {\n  var _JSON$parse2 = JSON.parse(request.data),\n      displayName = _JSON$parse2.displayName,\n      email = _JSON$parse2.email,\n      password = _JSON$parse2.password;\n\n  var isEmailAlreadyInUse = data.users.find(function (user) {\n    return user.email === email;\n  });\n  var error = {\n    email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n    displayName: displayName === '' ? 'Please enter your name.' : null\n  };\n\n  if (!error.displayName && !error.email) {\n    var userData = {\n      email: email,\n      password: password,\n      displayName: displayName,\n      photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n      phoneNumber: null\n    }; // Add user id\n\n    var length = data.users.length;\n    var lastIndex = 0;\n\n    if (length) {\n      lastIndex = data.users[length - 1].uid;\n    }\n\n    userData.uid = lastIndex + 1;\n    data.users.push(userData);\n    var accessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expireTime\n    });\n    var user = Object.assign({}, userData);\n    delete user['password'];\n    var response = {\n      userData: user,\n      accessToken: accessToken\n    };\n    return [200, response];\n  } else {\n    return [200, {\n      error: error\n    }];\n  }\n});\nmock.onPost('/api/auth/refresh-token').reply(function (request) {\n  var _JSON$parse3 = JSON.parse(request.data),\n      accessToken = _JSON$parse3.accessToken;\n\n  try {\n    var _jwt$verify = jwt.verify(accessToken, jwtConfig.secret),\n        id = _jwt$verify.id;\n\n    var userData = Object.assign({}, data.users.find(function (user) {\n      return user.uid === id;\n    }));\n    var newAccessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    delete userData['password'];\n    var response = {\n      userData: userData,\n      accessToken: newAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    var error = \"Invalid access token\";\n    return [401, {\n      error: error\n    }];\n  }\n});\nmock.onGet(\"/api/user/checkpoint-reward\").reply(function () {\n  return [200, data.checkpointReward];\n});",null]}