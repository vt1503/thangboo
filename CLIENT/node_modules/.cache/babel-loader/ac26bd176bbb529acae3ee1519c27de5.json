{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/todo/Todo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/todo/Todo.vue","mtime":1571653082000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moduleTodo from '@/store/todo/moduleTodo.js';\nimport TodoAddNew from \"./TodoAddNew.vue\";\nimport TodoTask from \"./TodoTask.vue\";\nimport TodoFilters from \"./TodoFilters.vue\";\nimport TodoEdit from \"./TodoEdit.vue\";\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nexport default {\n  data: function data() {\n    return {\n      currFilter: \"\",\n      clickNotClose: true,\n      displayPrompt: false,\n      taskIdToEdit: 0,\n      isSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.30\n      }\n    };\n  },\n  watch: {\n    todoFilter: function todoFilter() {\n      this.$refs.taskListPS.$el.scrollTop = 0;\n      this.toggleTodoSidebar(); // Fetch Tasks\n\n      var filter = this.$route.params.filter;\n      this.$store.dispatch(\"todo/fetchTasks\", {\n        filter: filter\n      });\n      this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter);\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    todo: function todo() {\n      return this.$store.state.todo.todoArray;\n    },\n    todoFilter: function todoFilter() {\n      return this.$route.params.filter;\n    },\n    taskList: function taskList() {\n      return this.$store.getters[\"todo/queriedTasks\"];\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.todo.todoSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch('todo/setTodoSearchQuery', val);\n      }\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    showDisplayPrompt: function showDisplayPrompt(itemId) {\n      this.taskIdToEdit = itemId;\n      this.displayPrompt = true;\n    },\n    hidePrompt: function hidePrompt() {\n      this.displayPrompt = false;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleTodoSidebar: function toggleTodoSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isSidebarActive = value;\n    }\n  },\n  components: {\n    TodoAddNew: TodoAddNew,\n    TodoTask: TodoTask,\n    TodoFilters: TodoFilters,\n    TodoEdit: TodoEdit,\n    VuePerfectScrollbar: VuePerfectScrollbar\n  },\n  created: function created() {\n    this.$store.registerModule('todo', moduleTodo);\n    this.setSidebarWidth();\n    var filter = this.$route.params.filter; // Fetch Tasks\n\n    this.$store.dispatch(\"todo/fetchTasks\", {\n      filter: filter\n    });\n    this.$store.commit(\"todo/UPDATE_TODO_FILTER\", filter); // Fetch Tags\n\n    this.$store.dispatch(\"todo/fetchTags\");\n  },\n  beforeUpdate: function beforeUpdate() {\n    this.currFilter = this.$route.params.filter;\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.unregisterModule('todo');\n  },\n  mounted: function mounted() {\n    this.$store.dispatch(\"todo/setTodoSearchQuery\", \"\");\n  }\n};",null]}