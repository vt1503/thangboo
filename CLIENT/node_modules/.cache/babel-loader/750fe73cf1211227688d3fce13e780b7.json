{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/email/Email.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/email/Email.vue","mtime":1573138056000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport EmailSidebar from \"./EmailSidebar.vue\";\nimport MailItem from \"./MailItem.vue\";\nimport EmailView from \"./EmailView.vue\";\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport moduleEmail from '@/store/email/moduleEmail.js';\nexport default {\n  data: function data() {\n    return {\n      openMailId: null,\n      selectedMails: [],\n      isSidebarActive: false,\n      showThread: false,\n      clickNotClose: true,\n      isEmailSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.30\n      }\n    };\n  },\n  watch: {\n    isSidebarActive: function isSidebarActive(value) {\n      if (!value) this.showThread = false;\n    },\n    mailFilter: function mailFilter() {\n      this.selectedMails = [];\n      this.$refs.mailListPS.$el.scrollTop = 0;\n      this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter);\n      this.$store.dispatch(\"email/fetchEmails\", {\n        filter: this.$route.params.filter\n      });\n      this.toggleEmailSidebar();\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    mailFilter: function mailFilter() {\n      return this.$route.params.filter;\n    },\n    emailTags: function emailTags() {\n      return this.$store.state.email.mailTags;\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.email.mailSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch('email/setEmailSearchQuery', val);\n      }\n    },\n    selectAllCheckBox: {\n      get: function get() {\n        return this.selectedMails.length;\n      },\n      set: function set(value) {\n        value ? this.selectedMails = this.mails.map(function (mail) {\n          return mail.id;\n        }) : this.selectedMails = [];\n      }\n    },\n    mails: function mails() {\n      return this.$store.getters['email/filteredMails'];\n    },\n    selectAllIcon: function selectAllIcon() {\n      return this.selectedMails.length == this.mails.length ? 'icon-check' : 'icon-minus';\n    },\n    isMailSelected: function isMailSelected() {\n      var _this = this;\n\n      return function (mailId) {\n        return _this.selectedMails.indexOf(mailId) == -1 ? false : true;\n      };\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    updateOpenMail: function updateOpenMail(mailId) {\n      this.openMailId = mailId;\n      this.isSidebarActive = true;\n    },\n    addToSelectedMails: function addToSelectedMails(mailId) {\n      if (this.selectedMails.indexOf(mailId) === -1) this.selectedMails.push(mailId);\n    },\n    removeSelectedMail: function removeSelectedMail(mailId) {\n      var mailIndex = this.selectedMails.indexOf(mailId);\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1);\n    },\n    moveTo: function moveTo(to) {\n      var payload = {\n        emailIds: this.selectedMails,\n        to: to\n      };\n      this.$store.dispatch('email/moveMailsTo', payload).catch(function (error) {\n        console.error(error);\n      });\n      this.selectedMails = [];\n    },\n    moveCurrentTo: function moveCurrentTo(to) {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(to);\n    },\n    updateMarkUnread: function updateMarkUnread() {\n      var payload = {\n        emailIds: this.selectedMails,\n        unreadFlag: true\n      };\n      this.$store.dispatch('email/setUnread', payload);\n      this.selectedMails = [];\n    },\n    removeOpenMail: function removeOpenMail() {\n      this.selectedMails = [this.openMailId];\n      this.moveTo('trashed');\n      this.isSidebarActive = false;\n    },\n    toggleIsStarred: function toggleIsStarred() {\n      var payload = {\n        mailId: this.currentMail.id,\n        value: !this.currentMail.isStarred\n      };\n      this.$store.dispatch('email/toggleIsMailStarred', payload);\n    },\n    nextMail: function nextMail() {\n      var _this2 = this;\n\n      var currentMailIndex = this.mails.findIndex(function (mail) {\n        return mail.id == _this2.openMailId;\n      });\n      if (this.mails[currentMailIndex + 1]) this.openMailId = this.mails[currentMailIndex + 1].id;\n    },\n    previousMail: function previousMail() {\n      var _this3 = this;\n\n      var currentMailIndex = this.mails.findIndex(function (mail) {\n        return mail.id == _this3.openMailId;\n      });\n      if (this.mails[currentMailIndex - 1]) this.openMailId = this.mails[currentMailIndex - 1].id;\n    },\n    updateSingleMarkUnread: function updateSingleMarkUnread() {\n      this.selectedMails = [this.openMailId];\n      this.updateMarkUnread();\n      this.isSidebarActive = false;\n    },\n    updateLabels: function updateLabels(label) {\n      this.$store.dispatch('email/updateLabels', {\n        mails: this.selectedMails,\n        label: label\n      });\n      this.selectedMails = [];\n    },\n    closeMailViewSidebar: function closeMailViewSidebar() {\n      this.isSidebarActive = false;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isEmailSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isEmailSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleEmailSidebar: function toggleEmailSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!value) {\n        this.closeMailViewSidebar();\n\n        if (this.clickNotClose) {\n          return;\n        }\n      }\n\n      this.isEmailSidebarActive = value;\n    }\n  },\n  components: {\n    MailItem: MailItem,\n    EmailSidebar: EmailSidebar,\n    EmailView: EmailView,\n    VuePerfectScrollbar: VuePerfectScrollbar\n  },\n  created: function created() {\n    this.$store.registerModule('email', moduleEmail);\n    this.setSidebarWidth();\n    this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter); // Update Mail Filter\n\n    this.$store.dispatch(\"email/fetchEmails\", {\n      filter: this.$route.params.filter\n    }); // Fetch Emails From API\n\n    this.$store.dispatch(\"email/fetchMeta\"); // Fetch Unread Mails\n\n    this.$store.dispatch(\"email/fetchTags\"); // Fetch Mail Tags\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.unregisterModule('email');\n  },\n  mounted: function mounted() {\n    this.$store.dispatch(\"email/setEmailSearchQuery\", \"\");\n  }\n};",null]}