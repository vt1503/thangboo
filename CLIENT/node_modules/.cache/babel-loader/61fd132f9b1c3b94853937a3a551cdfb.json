{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenuGroup.vue","mtime":1573632856000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VNavMenuItem from \"./VerticalNavMenuItem.vue\";\nexport default {\n  name: 'v-nav-menu-group',\n  props: {\n    openHover: {\n      type: Boolean,\n      default: false\n    },\n    open: {\n      type: Boolean,\n      default: false\n    },\n    group: {\n      type: Object\n    },\n    groupIndex: {\n      type: Number\n    }\n  },\n  components: {\n    VNavMenuItem: VNavMenuItem\n  },\n  data: function data() {\n    return {\n      maxHeight: '0px',\n      openItems: false\n    };\n  },\n  computed: {\n    verticalNavMenuItemsMin: function verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    styleItems: function styleItems() {\n      return {\n        maxHeight: this.maxHeight\n      };\n    },\n    itemIcon: function itemIcon() {\n      return function (index) {\n        if (!((index.match(/\\./g) || []).length > 1)) return \"CircleIcon\";\n      };\n    },\n    isGroupActive: function isGroupActive() {\n      var _this = this;\n\n      return function (item) {\n        var path = _this.$route.fullPath;\n        var open = false;\n        var routeParent = _this.$route.meta ? _this.$route.meta.parent : undefined;\n\n        var func = function func(item) {\n          if (item.submenu) {\n            item.submenu.forEach(function (item) {\n              if ((path == item.url || routeParent == item.slug) && item.url) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n\n        func(item);\n        return open;\n      };\n    }\n  },\n  watch: {\n    // OPEN & CLOSES DROPDOWN ON ROUTE CHANGE\n    '$route': function $route() {\n      var _this2 = this;\n\n      if (this.verticalNavMenuItemsMin) return;\n      var scrollHeight = this.scrollHeight; // Collapse Group\n\n      if (this.openItems && !this.open) {\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n        setTimeout(function () {\n          _this2.maxHeight = \"\".concat(0, \"px\");\n        }, 50); // Expand Group\n      } else if (this.open) {\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n        setTimeout(function () {\n          _this2.maxHeight = 'none';\n        }, 300);\n      }\n    },\n    maxHeight: function maxHeight() {\n      this.openItems = this.maxHeight != '0px';\n    },\n    // OPEN AND CLOSES DROPDOWN MENU ON NavMenu COLLAPSE AND DEFAULT VIEW\n    '$store.state.verticalNavMenuItemsMin': function $storeStateVerticalNavMenuItemsMin(val) {\n      var _this3 = this;\n\n      var scrollHeight = this.$refs.items.scrollHeight;\n\n      if (!val && this.open) {\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n        setTimeout(function () {\n          _this3.maxHeight = 'none';\n        }, 300);\n      } else {\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n        setTimeout(function () {\n          _this3.maxHeight = '0px';\n        }, 50);\n      }\n\n      if (val && this.open) {\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n        setTimeout(function () {\n          _this3.maxHeight = '0px';\n        }, 250);\n      }\n    }\n  },\n  methods: {\n    clickGroup: function clickGroup() {\n      var _this4 = this;\n\n      if (!this.openHover) {\n        var thisScrollHeight = this.$refs.items.scrollHeight;\n\n        if (this.maxHeight == '0px') {\n          this.maxHeight = \"\".concat(thisScrollHeight, \"px\");\n          setTimeout(function () {\n            _this4.maxHeight = 'none';\n          }, 300);\n        } else {\n          this.maxHeight = \"\".concat(thisScrollHeight, \"px\");\n          setTimeout(function () {\n            _this4.maxHeight = \"\".concat(0, \"px\");\n          }, 50);\n        }\n\n        this.$parent.$children.map(function (child) {\n          if (child.isGroupActive) {\n            if (child !== _this4 && !child.open && child.maxHeight != '0px') {\n              setTimeout(function () {\n                child.maxHeight = \"\".concat(0, \"px\");\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    mouseover: function mouseover() {\n      if (this.openHover) {\n        var scrollHeight = this.$refs.items.scrollHeight;\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n      }\n    },\n    mouseout: function mouseout() {\n      if (this.openHover) {\n        var scrollHeight = 0;\n        this.maxHeight = \"\".concat(scrollHeight, \"px\");\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.openItems = this.open;\n\n    if (this.open) {\n      this.maxHeight = 'none';\n    }\n  }\n};",null]}