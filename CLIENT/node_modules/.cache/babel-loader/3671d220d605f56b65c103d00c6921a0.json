{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js??ref--13-0!/Users/tule/Code/winbo.trade/src/http/requests/auth/jwt/index.js","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/http/requests/auth/jwt/index.js","mtime":1570195276000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"../../../axios/index.js\";\nimport store from \"../../../../store/store.js\"; // Token Refresh\n\nvar isAlreadyFetchingAccessToken = false;\nvar subscribers = [];\n\nfunction onAccessTokenFetched(access_token) {\n  subscribers = subscribers.filter(function (callback) {\n    return callback(access_token);\n  });\n}\n\nfunction addSubscriber(callback) {\n  subscribers.push(callback);\n}\n\nexport default {\n  init: function init() {\n    axios.interceptors.response.use(function (response) {\n      return response;\n    }, function (error) {\n      // const { config, response: { status } } = error\n      var config = error.config,\n          response = error.response;\n      var originalRequest = config; // if (status === 401) {\n\n      if (response && response.status === 401) {\n        if (!isAlreadyFetchingAccessToken) {\n          isAlreadyFetchingAccessToken = true;\n          store.dispatch(\"auth/fetchAccessToken\").then(function (access_token) {\n            isAlreadyFetchingAccessToken = false;\n            onAccessTokenFetched(access_token);\n          });\n        }\n\n        var retryOriginalRequest = new Promise(function (resolve) {\n          addSubscriber(function (access_token) {\n            originalRequest.headers.Authorization = 'Bearer ' + access_token;\n            resolve(axios(originalRequest));\n          });\n        });\n        return retryOriginalRequest;\n      }\n\n      return Promise.reject(error);\n    });\n  },\n  login: function login(email, pwd) {\n    return axios.post(\"/api/auth/login\", {\n      email: email,\n      password: pwd\n    });\n  },\n  registerUser: function registerUser(name, email, pwd) {\n    return axios.post(\"/api/auth/register\", {\n      displayName: name,\n      email: email,\n      password: pwd\n    });\n  },\n  refreshToken: function refreshToken() {\n    return axios.post(\"/api/auth/refresh-token\", {\n      accessToken: localStorage.getItem(\"accessToKen\")\n    });\n  }\n};",null]}