{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/trading/Index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/trading/Index.vue","mtime":1650691096706},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Chart } from 'highcharts-vue';\nimport Highcharts from 'highcharts';\nimport More from 'highcharts/highcharts-more';\nimport stockInit from 'highcharts/modules/stock';\nimport loadIndicatorsAll from 'highcharts/indicators/indicators';\nimport { isMobile, isTablet } from 'mobile-device-detect';\nimport getData from '@/pages/trade/navbar/components/data.json';\nimport SETTINGS from \"../../../settings.json\";\nimport AuthenticationService from '@/services/AuthenticationService';\nMore(Highcharts);\nstockInit(Highcharts);\nloadIndicatorsAll(Highcharts);\nvar timer = null;\n\nfunction convertTextValueMeter(t) {\n  return t >= -90 && t <= -54 ? {\n    cl: 'rank-1',\n    text: \"Strong sell\",\n    index: 1\n  } : t > -54 && t <= -18 ? {\n    cl: 'rank-2',\n    text: \"Sell\",\n    index: 2\n  } : t > -18 && t <= 17 ? {\n    cl: 'rank-3',\n    text: \"Neutral\",\n    index: 3\n  } : t > 17 && t <= 53 ? {\n    cl: 'rank-4',\n    text: \"Buy\",\n    index: 4\n  } : t > 53 ? {\n    cl: 'rank-5',\n    text: \"Strong Buy\",\n    index: 5\n  } : void 0;\n}\n\nvar UP_COLOR = \"#23c15f\",\n    DOWN_COLOR = \"#ee4b60\",\n    deviceVersion = 'pc';\nvar progressBar = $('.e-c-progress');\nvar lengthp = Math.PI * 2 * 100;\nprogressBar.css('stroke-dasharray', lengthp); //circle ends\n//let wholeTime = 30; // manage this to set the whole time\n\nif (isMobile) {\n  deviceVersion = 'mobile';\n} else if (isTablet) {\n  deviceVersion = 'tablet';\n}\n\nvar listData = [],\n    ohlcStock = [],\n    volumeStock = [];\nvar chartGet = '',\n    connected = false;\nvar stockChart = {\n  chart: {\n    panning: false,\n    followTouchMove: false,\n    // width: '100%',\n    // height: \"pc\" !== deviceVersion ? '100%' : (9 / 16 * 100) + '%', // 16:9 ratio\n    zoomType: \"\",\n    backgroundColor: \"transparent\",\n    // plotBackgroundImage: require('@/assets/images/sky/world_map.svg'),\n    marginLeft: 0,\n    marginRight: \"pc\" !== deviceVersion ? 60 : 80,\n    marginBottom: \"pc\" !== deviceVersion ? 20 : 30,\n    // margin: 0,\n    // defaultSeriesType: 'areaspline',\n    events: {// load(event) {\n      // event.target.reflow();\n      // }\n    }\n  },\n  rangeSelector: {\n    enabled: false,\n    selected: 4\n  },\n  credits: {\n    enabled: false\n  },\n  scrollbar: {\n    enabled: false\n  },\n  navigator: {\n    enabled: false\n  },\n  stockTools: {\n    gui: {\n      enabled: false\n    }\n  },\n  exporting: {\n    enabled: false\n  },\n  plotOptions: {\n    candlestick: {\n      lineColor: DOWN_COLOR,\n      upLineColor: UP_COLOR,\n      pointWidth: \"pc\" !== deviceVersion ? 10 : 11,\n      maxPointWidth: \"pc\" !== deviceVersion ? 9 : 11\n    },\n    column: {\n      minPointLength: 2,\n      pointWidth: \"pc\" !== deviceVersion ? 10 : 11,\n      maxPointWidth: \"pc\" !== deviceVersion ? 9 : 11,\n      borderWidth: 0,\n      pointPadding: 0,\n      groupPadding: 0\n    },\n    series: {\n      zIndex: 2,\n      states: {\n        inactive: {\n          opacity: 1\n        }\n      },\n      allowPointSelect: false,\n      point: {\n        events: {\n          click: function click() {}\n        }\n      }\n    }\n  },\n  tooltip: {\n    split: false,\n    enabled: true,\n    label: false,\n    animation: false,\n    backgroundColor: \"#081a34\",\n    borderColor: \"transparent\",\n    borderWidth: 0,\n    shadow: false,\n    stroke: \"transparent\",\n    useHTML: true,\n    style: {\n      color: \"#fff\",\n      fontSize: \"10px\",\n      stroke: \"transparent\"\n    },\n    formatter: function formatter() {\n      return \"BTC/USDT\" === this.series.name ? '\\n<span style=\"margin-right: 10px;\"><b>O</b>: ' + this.point.open + '</span>\\n<span style=\"margin-right: 10px;\"><b>C</b>: ' + this.point.close + '</span>\\n<span>&nbsp;</span>\\n<br/>\\n<span style=\"margin-right: 10px;\"><b>H</b>: ' + this.point.high + '</span>\\n<span style=\"margin-right: 10px;\"><b>L</b>: ' + this.point.low + \"</span>\\n<span><b>Vol</b>: \" + this.point.vol + \"</span>\" : \"Volume\" === this.series.name ? \"<b>Vol</b>: \" + this.y : \"\";\n    },\n    positioner: function positioner() {\n      var t = 20,\n          e = \"pc\" !== deviceVersion ? 50 : 60;\n      return {\n        x: t,\n        y: e\n      };\n    }\n  },\n  xAxis: {\n    //minRange:30 * 24,\n    type: \"datetime\",\n    labels: {\n      enabled: true,\n      formatter: function formatter() {\n        return Highcharts.dateFormat('%M:%S', this.value);\n      },\n      style: {\n        fontSize: 10,\n        color: \"#707070\"\n      }\n    },\n    plotLines: [{\n      value: 0,\n      color: \"#ffffff\",\n      width: .75,\n      id: \"current-pricex\",\n      zIndex: 1e3,\n      dashStyle: \"LongDash\"\n    }],\n    lineWidth: 0,\n    minorGridLineWidth: 0,\n    lineColor: \"transparent\",\n    minorTickLength: 0,\n    tickLength: 0\n  },\n  yAxis: [{\n    gridLineColor: \"#35275B\",\n    labels: {\n      align: \"right\",\n      x: \"pc\" !== deviceVersion ? 45 : 50,\n      style: {\n        color: \"#fff\",\n        fontSize: \"11px\"\n      }\n    },\n    height: \"90%\",\n    top: 0,\n    plotLines: [{\n      value: 0,\n      color: \"#ffffff\",\n      width: .75,\n      id: \"current-price\",\n      zIndex: 100,\n      label: {\n        useHTML: true,\n        text: 0,\n        x: \"pc\" !== deviceVersion ? 60 : 70,\n        align: \"right\",\n        style: {\n          color: \"#fff\",\n          fontSize: \"11px\",\n          background: \"transparent\",\n          borderRadius: \"4px\"\n        }\n      }\n    }],\n    lineWidth: 0,\n    resize: {\n      enabled: true\n    }\n  }, {\n    gridLineColor: \"\",\n    visible: false,\n    title: {\n      align: \"high\",\n      text: null,\n      rotation: 0,\n      y: 0,\n      useHTML: true\n    },\n    top: \"pc\" == deviceVersion ? \"83.4%\" : \"85%\",\n    height: \"15%\",\n    lineWidth: 0,\n    offset: 0\n  }],\n  series: [{\n    id: \"aapl\",\n    type: \"candlestick\",\n    name: \"BTC/USDT\",\n    color: DOWN_COLOR,\n    upColor: UP_COLOR,\n    data: ohlcStock\n  }, {\n    type: \"column\",\n    name: \"Volume\",\n    data: volumeStock,\n    yAxis: 1\n  }, {\n    name: \"sma1\",\n    id: \"sma1\",\n    type: \"sma\",\n    linkedTo: \"aapl\",\n    color: \"#2177FF\",\n    lineWidth: 2,\n    marker: false,\n    zIndex: 3,\n    visible: true,\n    enableMouseTracking: false,\n    params: {\n      index: \"0\",\n      period: 10\n    },\n    allowPointSelect: false,\n    point: {\n      events: {// click: function(t) {\n        //     setTimeout(function() {}, 500)\n        // }\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  }, {\n    name: \"sma2\",\n    id: \"sma2\",\n    type: \"sma\",\n    linkedTo: \"aapl\",\n    color: \"#E22A67\",\n    lineWidth: 2,\n    marker: false,\n    zIndex: 3,\n    visible: true,\n    enableMouseTracking: false,\n    params: {\n      index: \"1\",\n      period: 5\n    },\n    allowPointSelect: false,\n    point: {\n      events: {// click: function(t) {\n        //     setTimeout(function() {}, 500)\n        // }\n      },\n      tooltip: {\n        enabled: false\n      }\n    }\n  }]\n};\nvar gaugeMeterOs = {\n  chart: {\n    type: \"gauge\",\n    plotBorderWidth: null,\n    backgroundColor: \"rgba(0,0,0,0)\",\n    plotBackgroundColor: null,\n    plotBackgroundImage: null,\n    height: 70,\n    spacingBottom: 0,\n    spacingTop: 0,\n    spacingLeft: 0,\n    spacingRight: 0,\n    events: {\n      render: function render(t) {\n        var td = t.target.series[0].points[0].y;\n        var n = convertTextValueMeter(td);\n        $(\".gauge-meter--os .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl);\n        $(\".gauge-meter--os .gauge-meter-label-item\").removeClass(\"active\");\n        $(\".gauge-meter--os .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\");\n      }\n    },\n    animation: {\n      duration: 1500,\n      easing: \"easeOutBounce\"\n    }\n  },\n  title: {\n    text: ''\n  },\n  pane: [{\n    startAngle: -90,\n    endAngle: 90,\n    background: null,\n    center: [\"50%\", \"105%\"],\n    size: 140\n  }],\n  credits: {\n    enabled: false\n  },\n  exporting: {\n    enabled: false\n  },\n  tooltip: {\n    enabled: false\n  },\n  yAxis: [{\n    min: -90,\n    max: 90,\n    minorTickPosition: \"outside\",\n    tickPosition: \"outside\",\n    labels: {\n      rotation: \"auto\",\n      distance: 0,\n      style: {\n        color: \"rgba(0,0,0,0)\"\n      }\n    },\n    pane: 0,\n    title: \"\",\n    minorTickColor: \"rgba(0,0,0,0)\",\n    lineColor: \"rgba(0,0,0,0)\",\n    tickColor: \"rgba(0,0,0,0)\"\n  }],\n  plotOptions: {\n    gauge: {\n      dataLabels: {\n        enabled: false\n      },\n      dial: {\n        radius: \"85%\",\n        baseLength: \"1%\",\n        rearLength: 0,\n        backgroundColor: {\n          linearGradient: {\n            x1: 1,\n            y1: 0,\n            x2: 0,\n            y2: 0\n          },\n          stops: [[0, \"#fff\"], [1, \"#000\"]]\n        },\n        baseWidth: 6,\n        topWidth: 3\n      }\n    }\n  },\n  series: [{\n    name: \"Oscillator\",\n    data: [10],\n    yAxis: 0\n  }],\n  responsive: {\n    rules: [{\n      condition: {\n        maxWidth: 71\n      },\n      chartOptions: {\n        chart: {\n          height: 35\n        },\n        pane: [{\n          size: 70\n        }]\n      }\n    }]\n  }\n};\nvar gaugeMeterSu = {\n  chart: {\n    type: \"gauge\",\n    plotBorderWidth: null,\n    backgroundColor: \"rgba(0,0,0,0)\",\n    plotBackgroundColor: null,\n    plotBackgroundImage: null,\n    height: 88,\n    spacingBottom: 0,\n    spacingTop: 0,\n    spacingLeft: 0,\n    spacingRight: 0,\n    events: {\n      render: function render(t) {\n        var td = t.target.series[0].points[0].y;\n        var n = convertTextValueMeter(td);\n        $(\".gauge-meter--su .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl);\n        $(\".gauge-meter--su .gauge-meter-label-item\").removeClass(\"active\");\n        $(\".gauge-meter--su .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\");\n      }\n    },\n    animation: {\n      duration: 1500,\n      easing: \"easeOutBounce\"\n    }\n  },\n  title: {\n    text: ''\n  },\n  pane: [{\n    startAngle: -90,\n    endAngle: 90,\n    background: null,\n    center: [\"50%\", \"105%\"],\n    size: 176\n  }],\n  credits: {\n    enabled: false\n  },\n  exporting: {\n    enabled: false\n  },\n  tooltip: {\n    enabled: false\n  },\n  yAxis: [{\n    min: -90,\n    max: 90,\n    minorTickPosition: \"outside\",\n    tickPosition: \"outside\",\n    labels: {\n      rotation: \"auto\",\n      distance: 0,\n      style: {\n        color: \"rgba(0,0,0,0)\"\n      }\n    },\n    pane: 0,\n    title: \"\",\n    minorTickColor: \"rgba(0,0,0,0)\",\n    lineColor: \"rgba(0,0,0,0)\",\n    tickColor: \"rgba(0,0,0,0)\"\n  }],\n  plotOptions: {\n    gauge: {\n      dataLabels: {\n        enabled: false\n      },\n      dial: {\n        radius: \"85%\",\n        baseLength: \"1%\",\n        rearLength: 0,\n        backgroundColor: {\n          linearGradient: {\n            x1: 1,\n            y1: 0,\n            x2: 0,\n            y2: 0\n          },\n          stops: [[0, \"#fff\"], [1, \"#000\"]]\n        },\n        baseWidth: 6,\n        topWidth: 3\n      }\n    }\n  },\n  series: [{\n    name: \"Summary\",\n    data: [10],\n    yAxis: 0\n  }],\n  responsive: {\n    rules: [{\n      condition: {\n        maxWidth: 89\n      },\n      chartOptions: {\n        chart: {\n          height: 44\n        },\n        pane: [{\n          size: 88\n        }]\n      }\n    }]\n  }\n};\nvar gaugeMeterMa = {\n  chart: {\n    type: \"gauge\",\n    plotBorderWidth: null,\n    backgroundColor: \"rgba(0,0,0,0)\",\n    plotBackgroundColor: null,\n    plotBackgroundImage: null,\n    height: 70,\n    spacingBottom: 0,\n    spacingTop: 0,\n    spacingLeft: 0,\n    spacingRight: 0,\n    events: {\n      render: function render(t) {\n        var td = t.target.series[0].points[0].y;\n        var n = convertTextValueMeter(td);\n        $(\".gauge-meter--ma .gauge-meter-background\").removeClass(\"rank-1 rank-2 rank-3 rank-4 rank-5\").addClass(n.cl);\n        $(\".gauge-meter--ma .gauge-meter-label-item\").removeClass(\"active\");\n        $(\".gauge-meter--ma .gauge-meter-label-item:nth-child(\" + n.index + \")\").addClass(\"active\");\n      }\n    },\n    animation: {\n      duration: 1500,\n      easing: \"easeOutBounce\"\n    }\n  },\n  title: {\n    text: ''\n  },\n  pane: [{\n    startAngle: -90,\n    endAngle: 90,\n    background: null,\n    center: [\"50%\", \"105%\"],\n    size: 140\n  }],\n  credits: {\n    enabled: false\n  },\n  exporting: {\n    enabled: false\n  },\n  tooltip: {\n    enabled: false\n  },\n  yAxis: [{\n    min: -90,\n    max: 90,\n    minorTickPosition: \"outside\",\n    tickPosition: \"outside\",\n    labels: {\n      rotation: \"auto\",\n      distance: 0,\n      style: {\n        color: \"rgba(0,0,0,0)\"\n      }\n    },\n    pane: 0,\n    title: \"\",\n    minorTickColor: \"rgba(0,0,0,0)\",\n    lineColor: \"rgba(0,0,0,0)\",\n    tickColor: \"rgba(0,0,0,0)\"\n  }],\n  plotOptions: {\n    gauge: {\n      dataLabels: {\n        enabled: false\n      },\n      dial: {\n        radius: \"85%\",\n        baseLength: \"1%\",\n        rearLength: 0,\n        backgroundColor: {\n          linearGradient: {\n            x1: 1,\n            y1: 0,\n            x2: 0,\n            y2: 0\n          },\n          stops: [[0, \"#fff\"], [1, \"#000\"]]\n        },\n        baseWidth: 6,\n        topWidth: 3\n      }\n    }\n  },\n  series: [{\n    name: \"ma\",\n    data: [10],\n    yAxis: 0\n  }],\n  responsive: {\n    rules: [{\n      condition: {\n        maxWidth: 71\n      },\n      chartOptions: {\n        chart: {\n          height: 35\n        },\n        pane: [{\n          size: 70\n        }]\n      }\n    }]\n  }\n};\nexport default {\n  components: {\n    highcharts: Chart\n  },\n  data: function data() {\n    return {\n      thisIDPlayer: 0,\n      totalBuyStatic: 0,\n      totalSellStatic: 0,\n      //Moving\n      NumMovBUY: 0,\n      NumMovSELL: 0,\n      NumMovNeutral: 0,\n      textTitleMa: 'NEUTRAL',\n      //Oscillators\n      NumOscBUY: 0,\n      NumOscSELL: 0,\n      NumOscNeutral: 0,\n      textTitleOs: 'NEUTRAL',\n      //Summary\n      NumSumBUY: 0,\n      NumSumSELL: 0,\n      NumSumNeutral: 0,\n      textTitleSu: 'NEUTRAL',\n      moneyWin: 0,\n      isWinPop: false,\n      blObj: getData,\n      isBet: true,\n      CSBUY: 0,\n      CSSELL: 0,\n      isOrder: true,\n      activeGau: false,\n      activeHis: true,\n      balanceForuser: 0,\n      showMobileMenu: false,\n      betAmount: 10,\n      loiNhuan: 19.50,\n      optionsOs: gaugeMeterOs,\n      optionsSu: gaugeMeterSu,\n      optionsMa: gaugeMeterMa,\n      // chartOptions: {\n      //     series: [{\n      //         data: [1,2,3] // sample data\n      //         }]\n      // }\n      chartOptionsStock: stockChart,\n      betOpen: {\n        \"s\": 0,\n        \"l\": {\n          \"bet\": [{\n            \"items\": []\n          }]\n        }\n      },\n      isTablet: isTablet\n    };\n  },\n  computed: {\n    seconDown: function seconDown() {\n      return getData.countDown;\n    },\n    textTimeDown: function textTimeDown() {\n      return getData.textTimeDown;\n    },\n    isOpenSideBar: function isOpenSideBar() {\n      var isOpenSideBarStore = this.$store.state.isOpenSideBar;\n      return isOpenSideBarStore;\n    }\n  },\n  watch: {\n    \"oscillators.meter.numberValue\": function oscillatorsMeterNumberValue() {\n      this.redrawGaugeMeter(\"oscillators\"), this.redrawGaugeMeter(\"summary\");\n    },\n    \"movingAverages.meter.numberValue\": function movingAveragesMeterNumberValue() {\n      this.redrawGaugeMeter(\"movingAverages\"), this.redrawGaugeMeter(\"summary\");\n    },\n    \"isOpenSideBar\": function isOpenSideBar(isOpenSideBarStore) {\n      var tradeView = document.querySelector('.highcharts-container');\n      var cDesktop = document.querySelector('.c-desktop');\n      if (isTablet || isMobile) return isOpenSideBarStore;\n\n      if (isOpenSideBarStore) {\n        if (tradeView) {\n          tradeView.style.transform = \"translateX(-230px)\";\n        }\n\n        if (cDesktop) {\n          cDesktop.style.transform = \"translateX(-230px)\";\n        }\n      } else {\n        if (tradeView) {\n          tradeView.style.transform = \"translateX(0px)\";\n        }\n\n        if (cDesktop) {\n          cDesktop.style.transform = \"translateX(0px)\";\n        }\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.commit('TOGGLE_IS_OPEN_SIDEBAR', false);\n    var tradeView = document.querySelector('.highcharts-container');\n\n    if (tradeView) {\n      tradeView.style.transform = \"translateX(0px)\";\n    }\n  },\n  methods: {\n    disabledBet: function disabledBet() {\n      return this.isBet = !this.isBet ? true : false;\n    },\n    // redrawGaugeMeter: function(t) {\n    //     var e = void 0;\n    //     (e = \"oscillators\" === t ? this.gaugeMeterOs : \"movingAverages\" === t ? this.gaugeMeterMa : this.gaugeMeterSu) && e.series && (e.series[0].points[0].update(this[t].meter.numberValue, !1), e.redraw())\n    // },\n    sendMessage: function sendMessage(message) {\n      this.connection.send(JSON.stringify(message));\n    },\n    // convertTextState(t) {\n    //     switch (t) {\n    //         case \"buy\":\n    //             return h;\n    //         case \"sell\":\n    //             return u;\n    //         case \"neutral\":\n    //             return p\n    //     }\n    // },\n    replaceAll: function replaceAll(str, find, replace) {\n      return Number(str.replace(new RegExp(find, 'g'), replace));\n    },\n    changeBlance: function changeBlance(v) {\n      if (getData.isAccount) {\n        getData.blLive = getData.blLive - v;\n      } else {\n        getData.blDemo = getData.blDemo - v;\n      }\n\n      this.balanceForuser = getData.blDemo;\n    },\n    checkBet: function checkBet(v) {\n      // lấy tổng số dư của tài khoản\n      var sodu = getData.isAccount ? getData.blLive : getData.blDemo;\n      this.balanceForuser = sodu;\n      if (sodu < v) return true;\n    },\n    BetBuySell: function BetBuySell(v) {\n      this.playAudio('order');\n\n      if (getData.countDown <= 1) {\n        return this.$vs.notify({\n          text: 'Vui lòng đợi phiên sau!',\n          color: 'danger',\n          position: 'top-right',\n          iconPack: 'feather',\n          icon: 'icon-x-circle'\n        });\n      } //this.isBet = false\n\n\n      var gAmount = this.betAmount.toString();\n      gAmount = this.replaceAll(gAmount, ',', '');\n\n      if (this.checkBet(gAmount)) {\n        return this.$vs.notify({\n          text: 'Số dư của bạn không đủ',\n          color: 'danger',\n          position: 'top-right',\n          iconPack: 'feather',\n          icon: 'icon-x-circle'\n        });\n      }\n\n      var email = getData.email;\n      var typeAccount = getData.isAccount;\n      var uidLive = getData.uidLive;\n      var uidDemo = getData.uidDemo;\n      var uidAcc = 0;\n      this.changeBlance(gAmount);\n\n      if (typeAccount == 1) {\n        uidAcc = uidLive;\n      } else {\n        uidAcc = uidDemo;\n      }\n\n      var obj = {\n        email: email,\n        uid: uidAcc,\n        ref: getData.ref,\n        UpId: getData.upid,\n        typeAccount: typeAccount,\n        // 0: demo: 0 , 1: live\n        betAmount: gAmount,\n        type: v,\n        mkt: getData.mkt //idPlayer: this.thisIDPlayer\n\n      };\n      this.sendMessage({\n        type: 'bet',\n        data: obj\n      });\n      var ss = this.$store.session;\n      var timeGet = new Date().getTime();\n      this.betOpen.s = ss;\n      var itp = {\n        \"ss\": ss,\n        \"time\": timeGet,\n        \"amt\": gAmount,\n        \"type\": v,\n        \"acc_type\": typeAccount,\n        \"currencyType\": \"BTC/USD\",\n        \"classIcon\": \"iconBitcoin\"\n      };\n      this.betOpen.l.bet[0].items.push(itp);\n      localStorage.setItem('stateOpen', JSON.stringify(this.betOpen));\n      window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\n        detail: {\n          storage: localStorage.getItem('stateOpen')\n        }\n      }));\n      getData.Notify = this.betOpen.l.bet[0].items.length;\n      this.clearBAmount(); // if(v === 'buy'){\n      // }else{\n      //     return this.$vs.notify({\n      //         text:'Đặt lệnh thành công',\n      //         color:'success',\n      //         position:'top-right',\n      //         iconPack: 'feather',\n      //         icon:'icon-check'});\n      // }\n    },\n    deleteString: function deleteString() {\n      var getAmount = this.betAmount.toString();\n      var total = getAmount.slice(0, -1);\n      var sl = total.split(\".\");\n      var check = sl.length - 1;\n\n      if (check == 1) {\n        var _g = this.replaceAll(total, ',', ''); //console.log(g)\n\n\n        this.betAmount = this.formatPrice(_g, sl[1].length);\n        this.tinhloinhuan(_g);\n        return;\n      }\n\n      var g = this.getOnlyNumberInString(total, ',', '');\n      this.betAmount = this.formatPrice(g, 0);\n      this.tinhloinhuan(g);\n    },\n    writeBetAmountKey: function writeBetAmountKey(v) {\n      var getAmount = this.betAmount.toString() + v;\n      var sl = getAmount.split(\".\");\n      var check = sl.length - 1;\n\n      if (v == '.') {\n        this.betAmount = getAmount;\n        return;\n      }\n\n      if (check > 1) return;\n\n      if (check == 1) {\n        var g = this.replaceAll(getAmount, ',', '');\n        this.betAmount = this.formatPrice(g, sl[1].length);\n        this.tinhloinhuan(g);\n        return;\n      }\n\n      var a = this.getOnlyNumberInString(getAmount);\n      this.betAmount = this.formatPrice(a, 0);\n      this.tinhloinhuan(a);\n    },\n    congBetAmount: function congBetAmount() {\n      var getAmount = this.betAmount.toString();\n      var sl = getAmount.split(\".\");\n      var check = sl.length - 1;\n      if (check > 1) return;\n      var tt = 0;\n\n      if (check == 1) {\n        tt = this.replaceAll(getAmount, ',', '');\n        var kq = tt * 2;\n        this.betAmount = this.formatPrice(kq, sl[1].length);\n        this.tinhloinhuan(kq);\n        return;\n      }\n\n      var a = this.getOnlyNumberInString(getAmount);\n      tt = a * 2;\n      this.tinhloinhuan(tt);\n      this.betAmount = this.formatPrice(tt, 0);\n    },\n    truBetAmount: function truBetAmount() {\n      var getAmount = this.betAmount.toString();\n      var sl = getAmount.split(\".\");\n      var check = sl.length - 1;\n      if (check > 1) return;\n      var tt = 0;\n\n      if (check == 1) {\n        tt = this.replaceAll(getAmount, ',', '');\n        var kq = tt / 2;\n        this.betAmount = this.formatPrice(kq, sl[1].length);\n        this.tinhloinhuan(kq);\n        return;\n      }\n\n      var a = this.getOnlyNumberInString(getAmount);\n      tt = a / 2;\n      this.tinhloinhuan(tt);\n      this.betAmount = this.formatPrice(tt, 0);\n    },\n    nhapBetAmount: function nhapBetAmount(e) {\n      var g = e.target.value;\n      var check = g.split(\".\").length - 1;\n      if (check > 1) return;\n\n      if (check == 1) {\n        g = this.replaceAll(g, ',', '');\n        this.tinhloinhuan(g);\n        return;\n      }\n\n      g = this.getOnlyNumberInString(g);\n      this.betAmount = this.formatPrice(g, 0);\n      this.tinhloinhuan(g);\n    },\n    formatPrice: function formatPrice(value, minimum) {\n      var formatter = new Intl.NumberFormat('en-US', {\n        //style: 'currency',\n        //currency: '',\n        minimumFractionDigits: minimum\n      });\n      return formatter.format(value);\n    },\n    tinhloinhuan: function tinhloinhuan(m) {\n      var lb = Number(m);\n      lb = lb + lb * 95 / 100; // tính lợi nhuận 95%\n\n      this.loiNhuan = this.formatPrice(lb, 2);\n    },\n    getOnlyNumberInString: function getOnlyNumberInString(t) {\n      var e = t.match(/\\d+/g);\n      return e ? Number(e.join(\"\")) : 0;\n    },\n    clearBAmount: function clearBAmount() {\n      this.tinhloinhuan(10);\n      this.betAmount = 10;\n    },\n    clickCT: function clickCT(amount) {\n      var getAmount = this.betAmount.toString();\n      getAmount = this.betAmount.toString();\n\n      if (amount == 0) {\n        getAmount = getData.isAccount ? getData.blLive.toString() : getData.blDemo.toString();\n      }\n\n      var check = getAmount.split(\".\").length - 1;\n      if (check > 1) return;\n\n      if (check == 1) {\n        getAmount = this.replaceAll(getAmount, ',', '');\n\n        var _tt = getAmount + amount;\n\n        this.tinhloinhuan(_tt);\n        this.betAmount = this.formatPrice(_tt, 2);\n        return;\n      }\n\n      var aB = this.getOnlyNumberInString(getAmount);\n      var tt = aB + amount;\n      this.betAmount = this.formatPrice(tt, 0);\n      this.tinhloinhuan(tt);\n    },\n    editUser: function editUser() {\n      //this.sidebarData = data\n      this.toggleDataSidebar(true);\n    },\n    toggleDataSidebar: function toggleDataSidebar() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.addNewDataSidebar = val;\n    },\n    updateBarChart: function updateBarChart(boPrice) {\n      var chartInstance = chartGet;\n\n      try {\n        var lastCandle = chartInstance.series[1].points[chartInstance.series[1].points.length - 1];\n        var color = this.getColor(boPrice.open, boPrice.close);\n\n        if (lastCandle.x === boPrice.date) {\n          lastCandle.update({\n            x: boPrice.date,\n            y: boPrice.volume,\n            color: color\n          }, true);\n        } else {\n          chartInstance.series[1].addPoint({\n            x: boPrice.date,\n            y: boPrice.volume,\n            color: color\n          }, true, true);\n        }\n      } catch (err) {\n        console.log(err);\n      } finally {//\n      }\n    },\n    updateCandleStickChart: function updateCandleStickChart(boPrice) {\n      var chartInstance = chartGet;\n\n      try {\n        var lastCandle = chartInstance.series[0].points[chartInstance.series[0].points.length - 1];\n        var color = this.getColor(boPrice.open, boPrice.close);\n        var counter = Number(boPrice.candleClose);\n        var o = {\n          x: boPrice.date,\n          open: boPrice.open.toFixed(2) * 1,\n          high: boPrice.high.toFixed(2) * 1,\n          low: boPrice.low.toFixed(2) * 1,\n          close: boPrice.close.toFixed(2) * 1,\n          vol: boPrice.volume.toFixed(2) * 1,\n          color: color\n        };\n\n        if (lastCandle.x === boPrice.date) {\n          lastCandle.update(o, true);\n        } else {\n          chartInstance.series[0].addPoint(o, true, true); // if(listData.length >= 200){\n          //     listData.shift();\n          // }\n          //console.log(boPrice);\n\n          listData.push(boPrice);\n          var begin = 0; //console.log(listData);\n\n          var _chartInstance$xAxis$ = chartInstance.xAxis[0].getExtremes(),\n              dataMax = _chartInstance$xAxis$.dataMax;\n\n          if (deviceVersion !== 'pc') {\n            begin = this.setSizeStock(listData);\n            chartGet.xAxis[0].setExtremes(listData[begin + 40]['date'], dataMax, false);\n            chartGet.redraw();\n          } else {\n            var c = listData.length;\n            chartGet.xAxis[0].setExtremes(listData[c - 90]['date'], dataMax, false);\n            chartGet.redraw();\n          }\n        }\n\n        chartInstance.xAxis[0].options.plotLines[0].value = boPrice.date;\n        chartInstance.yAxis[0].options.plotLines[0].value = boPrice.close;\n        var f = chartInstance.yAxis[0].plotLinesAndBands[0];\n        f.label && f.label.attr({\n          text: '<div class=\"plotlineChart flex flex-col\"><span class=\"price\">' + boPrice.close + '</span><span class=\"time self-end\">00:' + (counter > 9 ? counter : \"0\" + counter) + '</span></div>'\n        });\n\n        if (boPrice.type === 'order') {\n          this.isOrder = true;\n          this.isBet = true;\n          getData.textTimeDown = 'Hãy đặt lệnh';\n        } else {\n          this.isOrder = false;\n          this.isBet = false;\n          getData.textTimeDown = 'Chờ kết quả';\n        }\n\n        getData.countDown = counter > 9 ? counter : \"0\" + counter;\n      } catch (_unused) {}\n    },\n    getColor: function getColor(openPrice, closePrice) {\n      return openPrice < closePrice ? UP_COLOR : DOWN_COLOR;\n    },\n    onReceiveSocketData: function onReceiveSocketData(boPrice) {\n      this.updateCandleStickChart(boPrice);\n      this.updateBarChart(boPrice);\n    },\n    StaOscillators: function StaOscillators(e) {\n      try {\n        var chart = this.$refs.chartOs.chart;\n        var left = chart.series[0].points[0],\n            leftVal; //Oscillators\n\n        this.NumOscBUY = e.b;\n        this.NumOscSELL = e.s;\n        this.NumOscNeutral = e.m;\n\n        if (e.m > e.s && e.m > e.b || e.m === e.s && e.m === e.b) {\n          this.textTitleOs = 'NEUTRAL';\n          left.update(0, true);\n          chart.redraw();\n        }\n\n        if (e.s > e.b) {\n          leftVal = -35;\n          this.textTitleOs = 'SELL';\n          if (e.s >= 5) leftVal = -70, this.textTitleOs = 'STRONG SELL';\n          left.update(leftVal, true);\n          chart.redraw();\n        } else if (e.s < e.b) {\n          leftVal = 35;\n          this.textTitleOs = 'BUY';\n          if (e.b >= 5) leftVal = 70, this.textTitleOs = 'STRONG BUY';\n          left.update(leftVal, true);\n          chart.redraw();\n        }\n      } catch (_unused2) {}\n    },\n    StaSummary: function StaSummary(e) {\n      try {\n        var chart = this.$refs.chartSu.chart;\n        var left = chart.series[0].points[0],\n            leftVal; //Summary\n\n        this.NumSumBUY = e.b;\n        this.NumSumSELL = e.s;\n        this.NumSumNeutral = e.m;\n\n        if (e.m > e.s && e.m > e.b || e.m === e.s && e.m === e.b) {\n          this.textTitleSu = 'NEUTRAL';\n          left.update(0, true);\n          chart.redraw();\n          return;\n        }\n\n        if (e.s > e.b) {\n          leftVal = -35;\n          this.textTitleSu = 'SELL';\n          if (e.s >= 5) leftVal = -70, this.textTitleSu = 'STRONG SELL';\n          left.update(leftVal, true);\n          chart.redraw();\n        } else if (e.s < e.b) {\n          leftVal = 35;\n          this.textTitleSu = 'BUY';\n          if (e.b >= 5) leftVal = 70, this.textTitleSu = 'STRONG BUY';\n          left.update(leftVal, true);\n          chart.redraw();\n        }\n      } catch (_unused3) {}\n    },\n    StaMovingAverages: function StaMovingAverages(e) {\n      try {\n        var chart = this.$refs.chartMa.chart;\n        var left = chart.series[0].points[0],\n            leftVal; //Moving\n\n        this.NumMovBUY = e.b;\n        this.NumMovSELL = e.s;\n        this.NumMovNeutral = e.m;\n\n        if (e.m > e.s && e.m > e.b || e.m === e.s && e.m === e.b) {\n          this.textTitleMa = 'NEUTRAL';\n          left.update(0, true);\n          chart.redraw();\n          return;\n        }\n\n        if (e.s > e.b) {\n          leftVal = -35;\n          this.textTitleMa = 'SELL';\n          if (e.s >= 5) leftVal = -70, this.textTitleMa = 'STRONG SELL';\n          left.update(leftVal, true);\n          chart.redraw();\n        } else if (e.s < e.b) {\n          leftVal = 35;\n          this.textTitleMa = 'BUY';\n          if (e.b >= 5) leftVal = 70, this.textTitleMa = 'STRONG BUY';\n          left.update(leftVal, true);\n          chart.redraw();\n        }\n      } catch (_unused4) {}\n    },\n    // setSizeStock(){\n    setSizeStock: function setSizeStock(data) {\n      var chartWidth = parseInt($('.chartBox').width());\n      var numBar = Math.floor((chartWidth - 90) / 17.44); //90 17.44 13.44\n\n      if (numBar < data.length) {\n        return data.length - numBar - 40;\n      } // var chartWidth = parseInt($('.chartBox').width());\n      // if (chartWidth < 400) {\n      //     return 65;\n      // }\n      // if (chartWidth > 400 && chartWidth < 800) {\n      //     return 95;\n      // }\n\n    },\n    getDataDefaultGet: function getDataDefaultGet(get) {\n      var data = get;\n      ohlcStock = [], volumeStock = [];\n      var begin = 0;\n\n      if (deviceVersion !== 'pc') {\n        begin = this.setSizeStock(data);\n      } else {\n        var getWidth = parseInt($('body').width());\n\n        if (getWidth >= 1260 && getWidth <= 1500) {\n          begin = 55;\n        }\n\n        if (getWidth >= 1500 && getWidth <= 1600) {\n          begin = 45;\n        }\n\n        if (getWidth >= 820 && getWidth <= 1260) {\n          begin = 75;\n        }\n\n        if (getWidth > 1500) {\n          begin = 35;\n        }\n      }\n\n      for (var i = begin; i < data.length; i++) {\n        var _o = {\n          x: data[i].date,\n          // the date\n          open: data[i].open,\n          // open\n          high: data[i].high,\n          // high\n          low: data[i].low,\n          // low\n          close: data[i].close,\n          // close\n          vol: data[i].volume // volume\n\n        };\n        ohlcStock.push(_o);\n        volumeStock.push({\n          x: data[i].date,\n          // the date\n          y: data[i].volume,\n          // the volume\n          color: data[i].open < data[i].close ? UP_COLOR : DOWN_COLOR\n        });\n      }\n\n      stockChart.series[0].data = ohlcStock;\n      stockChart.series[1].data = volumeStock;\n      this.chartOptionsStock = stockChart;\n      var ao = setInterval(function () {\n        if (chartGet != '') {\n          clearInterval(ao);\n\n          var _chartGet$xAxis$0$get = chartGet.xAxis[0].getExtremes(),\n              dataMax = _chartGet$xAxis$0$get.dataMax; //dataMin\n\n\n          if (deviceVersion !== 'pc') {\n            chartGet.xAxis[0].setExtremes(data[begin + 40]['date'], dataMax, false);\n            chartGet.redraw();\n          } else {\n            var c = data.length;\n            chartGet.xAxis[0].setExtremes(data[c - 90]['date'], dataMax, false);\n            chartGet.redraw();\n          }\n        }\n      }, 100);\n    },\n    setChartHeight: function setChartHeight() {\n      var _this = this;\n\n      if (window.innerWidth > 768) {\n        deviceVersion = 'pc';\n      } else {\n        deviceVersion = 'mobile';\n      } //$('.w-18').css('max-width', $('#analysis-wrapper').width() / 4)\n\n\n      var setS = setInterval(function () {\n        var w = $('.chartBox').width();\n        var h = $('.chartBox').height();\n\n        if (!!w && !!h) {\n          var cH = _this.$refs.chartStock.chart.chartHeight;\n\n          if (cH !== h) {\n            var chartInstance = _this.$refs.chartStock.chart;\n            chartInstance.setSize(w, h, true);\n            chartGet = chartInstance;\n          } else {\n            clearInterval(setS);\n          }\n        }\n      }, 600); //this.$forceUpdate();\n    },\n    onWindowLoad: function onWindowLoad() {\n      var uidLive = getData.uidLive;\n      var uidDemo = getData.uidDemo;\n      var uidAcc = 0;\n      var acc = localStorage.getItem('BO_BALANCE_TYPE');\n\n      if (acc == 'LIVE') {\n        getData.isAccount = 1;\n      } else {\n        getData.isAccount = 0;\n      }\n\n      getData.isAccount ? uidAcc = uidLive : uidAcc = uidDemo;\n      this.sendMessage({\n        type: 'accountDetail',\n        data: {\n          uid: uidAcc,\n          email: getData.email\n        }\n      });\n      var notify = JSON.parse(localStorage.getItem('stateOpen'));\n\n      if (notify) {\n        getData.Notify = notify.l.bet[0].items.length;\n      }\n    },\n    addSound: function addSound() {\n      createjs.Sound.alternateExtensions = [\"mp3\"];\n      createjs.Sound.registerSounds([{\n        id: \"win\",\n        src: require('@/assets/sounds/win-n.mp3')\n      }, {\n        id: \"lose\",\n        src: require('@/assets/sounds/lose-n.mp3')\n      }, {\n        id: \"order\",\n        src: require('@/assets/sounds/order-n.mp3')\n      }]);\n    },\n    playAudio: function playAudio(v) {\n      var checkSound = localStorage.getItem('SOUND');\n      if (checkSound === 'false') return;\n      createjs.Sound.play(v); // let sound;\n      // if(v == 'win'){\n      //    // sound = require('@/assets/sounds/win-n.mp3');\n      // }else if(v == 'lose'){\n      //   //  sound = require('@/assets/sounds/lose-n.mp3');\n      // }else if(v == 'order'){\n      //    // sound = require('@/assets/sounds/order-n.mp3');\n      // }\n      // var audio = new Audio(sound);\n      // audio.play();\n    },\n    getUserInfo: function getUserInfo() {\n      AuthenticationService.getInfoUser().then(function (res) {\n        if (res.data.success == 1) {\n          var gData = res.data.data;\n          getData.uid = gData.id, getData.email = gData.email, getData.profile_image = gData.profile_image, getData.displayName = gData.nick_name, getData.uidLive = gData.order[1].u_id, getData.uidDemo = gData.order[0].u_id, getData.vip = gData.vip, getData.vip_lv = gData.level_vip, getData.pen_commiss = gData.pending_commission, getData.ref = gData.ref, getData.c2fa = gData.fa2, getData.id_front = gData.id_front, getData.id_back = gData.id_back, getData.first_name = gData.first_name, getData.last_name = gData.last_name, getData.verify = gData.verify, getData.num_secu = gData.num_secury, getData.country = gData.c, getData.blLive = gData.order[1].balance;\n          getData.blDemo = gData.order[0].balance;\n          getData.balance = gData.balance, getData.mkt = gData.mkt;\n          localStorage.setItem('INFO', JSON.stringify(gData));\n        } else {\n          window.location.href = window.location.origin + '/login';\n        }\n      });\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    //let token = localStorage.getItem('token')\n    //this.$store.dispatch('setToken', token)\n    var acc = localStorage.getItem('BO_BALANCE_TYPE');\n\n    if (acc == 'LIVE') {\n      getData.isAccount = 1;\n    } else {\n      getData.isAccount = 0;\n    } // lấy tổng số dư của tài khoản\n\n\n    this.balanceForuser = getData.isAccount ? getData.blLive : getData.blDemo;\n\n    if (!connected) {\n      connected = true;\n      this.connection = new WebSocket(SETTINGS.BASE_URL_SOCKET); //this.$store.connected = this.connection\n\n      this.connection.onopen = function () {\n        //console.log(\"Successfully connected to the echo websocket server...\")\n        this.onWindowLoad();\n        this.getUserInfo();\n      }.bind(this);\n\n      this.connection.onmessage = function (event) {\n        var _this2 = this;\n\n        var data = JSON.parse(event.data);\n        var dl = data.data;\n\n        if (data.type === 'getListDauTien') {\n          if (!!dl) {\n            listData = dl;\n            this.getDataDefaultGet(dl);\n          }\n        }\n\n        if (data.type === 'getidPlayer') {\n          this.thisIDPlayer = data.data;\n        }\n\n        if (data.type === 'allData') {\n          this.onReceiveSocketData(dl);\n        }\n\n        if (data.type === 'transVolum') {\n          if (dl.nbuy) {\n            this.CSBUY = dl.ptbuy;\n            this.CSSELL = dl.ptsell;\n          }\n        }\n\n        if (data.type === 'checkBet') {\n          this.isBet = true;\n          return this.$vs.notify({\n            text: 'Đặt lệnh thành công',\n            color: 'success',\n            position: 'top-right',\n            iconPack: 'feather',\n            icon: 'icon-check'\n          });\n        }\n\n        if (data.type === 'kq') {\n          //console.log(dl);\n          if (dl.kq == 'win') {\n            var mn = dl.money;\n            this.playAudio('win');\n\n            if (getData.isAccount) {\n              getData.blLive = getData.blLive + mn;\n            } else {\n              getData.blDemo = getData.blDemo + mn;\n            }\n\n            this.moneyWin = this.formatPrice(mn, 2);\n            this.isWinPop = true;\n            setTimeout(function () {\n              _this2.isWinPop = false;\n            }, 3000);\n          } else {\n            this.playAudio('lose');\n          } // xóa notice = 0\n\n\n          getData.Notify = 0;\n          this.betOpen.l.bet[0].items = [];\n          localStorage.removeItem('stateOpen');\n          window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\n            detail: {\n              storage: undefined\n            }\n          }));\n        }\n\n        if (data.type === 'mess') {\n          if (dl.type == 'bet') {\n            return this.$vs.notify({\n              text: dl.mess,\n              color: dl.style,\n              position: 'top-right',\n              iconPack: 'feather',\n              icon: 'icon-x-circle'\n            });\n          }\n\n          if (dl.type === 'disAccount') {\n            // đăng xuất tài khoản\n            setTimeout(function () {\n              localStorage.removeItem('tokenUser');\n              localStorage.removeItem('INFO');\n              getData.Notify = 0;\n              localStorage.removeItem('stateOpen');\n              window.location.href = window.location.origin + '/login';\n            }, 3000);\n            return this.$vs.notify({\n              text: dl.mess,\n              color: dl.style,\n              position: 'top-right',\n              iconPack: 'feather',\n              icon: 'icon-x-circle'\n            });\n          }\n\n          if (dl.type === 'reloadAccount') {\n            location.reload();\n          }\n        }\n\n        if (data.type === 'static') {\n          var indicato = data.load;\n          this.StaOscillators(indicato.Oscillators);\n          this.StaSummary(indicato.Summary);\n          this.StaMovingAverages(indicato.Moving); //this.totalBuyStatic = dl.cbuy;\n          //this.totalSellStatic = dl.csell;\n\n          var sta = dl.static;\n          var stl = sta.length;\n          var istart = 0;\n          var csl = 40;\n          this.totalBuyStatic = this.totalSellStatic = 0; //if(isMobile){ // rs lại tổng số\n          //    this.totalBuyStatic = this.totalSellStatic = 0;\n          //}\n\n          if (isMobile && stl > 60) {\n            //let sl = stl - csl;\n            var sl = 0;\n\n            if (stl > 60 && stl <= 80) {\n              sl = 20;\n            } else if (stl > 80) {\n              sl = 40;\n            }\n\n            for (var x = 0; x < sl; x++) {\n              sta.shift();\n            }\n\n            stl = sta.length;\n          }\n\n          var list = $('.historyBox');\n          $('.historyBox .item').removeClass('bg-green bg-red');\n\n          for (var i = istart; i < stl; i++) {\n            var item = i; // let l1 = $('.historyBox .list1')\n            // let l2 = $('.historyBox .list2')\n            // let l3 = $('.historyBox .list3')\n            // let l4 = $('.historyBox .list4')\n            // let l5 = $('.historyBox .list5')\n\n            if (i < 20) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 19 && i < 40) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 39 && i < 60) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 59 && i < 80) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 79 && i < 100) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n          }\n        }\n      }.bind(this);\n\n      this.connection.onclose = function () {\n        // xóa notice = 0\n        getData.Notify = 0;\n        _this3.betOpen.l.bet[0].items = [];\n        localStorage.removeItem('stateOpen');\n      }; //window.addEventListener(\"load\", this.onWindowLoad);\n\n    } else if (typeof this.connection === 'undefined') {\n      this.connection = new WebSocket(SETTINGS.BASE_URL_SOCKET);\n\n      this.connection.onopen = function () {\n        //console.log(\"Successfully connected to the echo websocket server...\")\n        this.onWindowLoad();\n        this.getUserInfo();\n      }.bind(this);\n\n      this.connection.onmessage = function (event) {\n        var _this4 = this;\n\n        var data = JSON.parse(event.data);\n        var dl = data.data;\n\n        if (data.type === 'getListDauTien') {\n          if (!!dl) {\n            listData = dl;\n            this.getDataDefaultGet(dl);\n          }\n        }\n\n        if (data.type === 'getidPlayer') {\n          this.thisIDPlayer = data.data;\n        }\n\n        if (data.type === 'allData') {\n          this.onReceiveSocketData(dl);\n        }\n\n        if (data.type === 'transVolum') {\n          if (dl.nbuy) {\n            this.CSBUY = dl.ptbuy;\n            this.CSSELL = dl.ptsell;\n          }\n        }\n\n        if (data.type === 'checkBet') {\n          this.isBet = true;\n          return this.$vs.notify({\n            text: 'Đặt lệnh thành công',\n            color: 'success',\n            position: 'top-right',\n            iconPack: 'feather',\n            icon: 'icon-check'\n          });\n        }\n\n        if (data.type === 'kq') {\n          //console.log(dl);\n          if (dl.kq == 'win') {\n            var mn = dl.money;\n            this.playAudio('win');\n\n            if (getData.isAccount) {\n              getData.blLive = getData.blLive + mn;\n            } else {\n              getData.blDemo = getData.blDemo + mn;\n            }\n\n            this.moneyWin = this.formatPrice(mn, 2);\n            this.isWinPop = true;\n            setTimeout(function () {\n              _this4.isWinPop = false;\n            }, 3000);\n          } else {\n            this.playAudio('lose');\n          } // xóa notice = 0\n\n\n          getData.Notify = 0;\n          this.betOpen.l.bet[0].items = [];\n          localStorage.removeItem('stateOpen');\n          window.dispatchEvent(new CustomEvent('stateOpen-localstorage-changed', {\n            detail: {\n              storage: undefined\n            }\n          }));\n        }\n\n        if (data.type === 'mess') {\n          if (dl.type == 'bet') {\n            return this.$vs.notify({\n              text: dl.mess,\n              color: dl.style,\n              position: 'top-right',\n              iconPack: 'feather',\n              icon: 'icon-x-circle'\n            });\n          }\n\n          if (dl.type === 'disAccount') {\n            // đăng xuất tài khoản\n            setTimeout(function () {\n              localStorage.removeItem('tokenUser');\n              localStorage.removeItem('INFO');\n              getData.Notify = 0;\n              localStorage.removeItem('stateOpen');\n              window.location.href = window.location.origin + '/login';\n            }, 3000);\n            return this.$vs.notify({\n              text: dl.mess,\n              color: dl.style,\n              position: 'top-right',\n              iconPack: 'feather',\n              icon: 'icon-x-circle'\n            });\n          }\n\n          if (dl.type === 'reloadAccount') {\n            location.reload();\n          }\n        }\n\n        if (data.type === 'static') {\n          var indicato = data.load;\n          this.StaOscillators(indicato.Oscillators);\n          this.StaSummary(indicato.Summary);\n          this.StaMovingAverages(indicato.Moving); //this.totalBuyStatic = dl.cbuy;\n          //this.totalSellStatic = dl.csell;\n\n          var sta = dl.static;\n          var stl = sta.length;\n          var istart = 0;\n          var csl = 40;\n          this.totalBuyStatic = this.totalSellStatic = 0; //if(isMobile){ // rs lại tổng số\n          //    this.totalBuyStatic = this.totalSellStatic = 0;\n          //}\n\n          if (isMobile && stl > 60) {\n            //let sl = stl - csl;\n            var sl = 0;\n\n            if (stl > 60 && stl <= 80) {\n              sl = 20;\n            } else if (stl > 80) {\n              sl = 40;\n            }\n\n            for (var x = 0; x < sl; x++) {\n              sta.shift();\n            }\n\n            stl = sta.length;\n          }\n\n          var list = $('.historyBox');\n          $('.historyBox .item').removeClass('bg-green bg-red');\n\n          for (var i = istart; i < stl; i++) {\n            var item = i; // let l1 = $('.historyBox .list1')\n            // let l2 = $('.historyBox .list2')\n            // let l3 = $('.historyBox .list3')\n            // let l4 = $('.historyBox .list4')\n            // let l5 = $('.historyBox .list5')\n\n            if (i < 20) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 19 && i < 40) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 39 && i < 60) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 59 && i < 80) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n\n            if (i > 79 && i < 100) {\n              if (sta[i] == 'buy') {\n                list.find('.item:eq(' + item + ')').addClass('bg-green');\n                this.totalBuyStatic++;\n              } else if (sta[i] == 'sell') {\n                list.find('.item:eq(' + item + ')').addClass('bg-red');\n                this.totalSellStatic++;\n              }\n            }\n          }\n        }\n      }.bind(this);\n\n      this.connection.onclose = function () {\n        // xóa notice = 0\n        getData.Notify = 0;\n        _this3.betOpen.l.bet[0].items = [];\n        localStorage.removeItem('stateOpen');\n      };\n    } else {//this.sendMessage({type: 'getListData'});\n      // Fix reload index page\n      // this.$router.go(this.$router.currentRoute);\n    }\n  },\n  mounted: function mounted() {\n    this.addSound();\n    window.addEventListener(\"resize\", this.setChartHeight); //window.addEventListener(\"load\", this.setChartHeight);\n\n    this.setChartHeight(); // this.isMounted = true;\n    // const chart = this.$children[1].$refs.highcharts\n    // console.log(chart);\n    //setTimeout(() => {\n    // let chart = this.$refs.chartOs.chart\n    // if (chart.series) { // the chart may be destroyed\n    //     timer = setInterval(() => {\n    //         var left = chart.series[0].points[0],\n    //             //right = chart.series[1].points[0],\n    //             leftVal,\n    //             //rightVal,\n    //             inc = (Math.random() * 200) - 85;\n    //         leftVal = left.y + inc;\n    //         //console.log(left.y)\n    //         //rightVal = leftVal + inc / 3;\n    //         if (leftVal < -85 || leftVal > 85) {\n    //             leftVal = left.y - inc;\n    //         }\n    //         // if (rightVal < -20 || rightVal > 6) {\n    //         //     rightVal = leftVal;\n    //         // }\n    //         //console.log(leftVal)\n    //         left.update(leftVal, false);\n    //         //right.update(rightVal, false);\n    //         chart.redraw();\n    //     }, 3000)\n    // }\n    //}, 3000)\n\n    this.$store.commit('SET_IS_RENDER_TRADE_INDEX', true);\n  },\n  destroyed: function destroyed() {\n    //window.removeEventListener(\"resize\", this.setChartHeight);\n    if (timer) {\n      clearInterval(timer);\n    }\n\n    this.$store.commit('SET_IS_RENDER_TRADE_INDEX', false);\n    this.connection.close();\n  }\n};",null]}