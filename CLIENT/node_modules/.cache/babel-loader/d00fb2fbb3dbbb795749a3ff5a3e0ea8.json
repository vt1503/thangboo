{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/components/extra-components/tree/TreeSearchTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/components/extra-components/tree/TreeSearchTree.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/tule/Code/winbo.trade/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VTree, VSelectTree } from 'vue-tree-halower';\nexport default {\n  data: function data() {\n    return {\n      searchword: '',\n      treeData: [{\n        title: 'node1',\n        expanded: true,\n        children: [{\n          title: 'node 1-1',\n          expanded: true,\n          children: [{\n            title: 'node 1-1-1'\n          }, {\n            title: 'node 1-1-2'\n          }, {\n            title: 'node 1-1-3'\n          }]\n        }, {\n          title: 'node 1-2',\n          children: [{\n            title: \"<span style='color: red'>node 1-2-1</span>\"\n          }, {\n            title: \"<span style='color: red'>node 1-2-2</span>\"\n          }]\n        }]\n      }]\n    };\n  },\n  methods: {\n    search: function search() {\n      this.$refs.tree.searchNodes(this.searchword);\n    },\n    tpl: function tpl() {\n      var _this = this;\n\n      var h = this.$createElement;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var node = args[0],\n          parent = args[2],\n          index = args[3];\n      var titleClass = node.selected ? 'node-title node-selected' : 'node-title';\n      if (node.searched) titleClass += ' node-searched';\n      return h(\"span\", [h(\"span\", {\n        \"class\": \"tree-expand\",\n        \"on\": {\n          \"click\": function click() {\n            return _this.$refs.tree.addNode(node, {\n              title: 'sync node'\n            });\n          }\n        }\n      }, [\"+\"]), h(\"span\", {\n        \"class\": titleClass,\n        \"domProps\": {\n          \"innerHTML\": node.title\n        },\n        \"on\": {\n          \"click\": function click() {\n            _this.$refs.tree.nodeSelected(node);\n          }\n        }\n      }), h(\"button\", {\n        \"class\": \"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\",\n        \"on\": {\n          \"click\": function click() {\n            return _this.asyncLoad(node);\n          }\n        }\n      }, [\"async\"]), h(\"button\", {\n        \"class\": \"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\",\n        \"on\": {\n          \"click\": function click() {\n            return _this.$refs.tree.delNode(node, parent, index);\n          }\n        }\n      }, [\"delete\"])]);\n    },\n    asyncLoad: function () {\n      var _asyncLoad = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {\n        var _node$checked, checked, pro;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _node$checked = node.checked, checked = _node$checked === void 0 ? false : _node$checked;\n                this.$set(node, 'loading', true);\n                pro = new Promise(function (resolve) {\n                  setTimeout(resolve, 2000, ['async node1', 'async node2']);\n                });\n                _context.t0 = this.$refs.tree;\n                _context.t1 = node;\n                _context.next = 7;\n                return pro;\n\n              case 7:\n                _context.t2 = _context.sent;\n\n                _context.t0.addNodes.call(_context.t0, _context.t1, _context.t2);\n\n                this.$set(node, 'loading', false);\n\n                if (checked) {\n                  this.$refs.tree.childCheckedHandle(node, checked);\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function asyncLoad(_x) {\n        return _asyncLoad.apply(this, arguments);\n      }\n\n      return asyncLoad;\n    }()\n  },\n  components: {\n    VTree: VTree,\n    VSelectTree: VSelectTree\n  }\n};",null]}