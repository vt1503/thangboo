{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/vx-tooltip/VxTooltip.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/vx-tooltip/VxTooltip.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.math.sign\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport utils from '@/assets/utils';\nimport _color from '@/assets/utils/color.js';\nexport default {\n  name: 'vx-tooltip',\n  props: {\n    title: {\n      default: null,\n      type: [String, Number]\n    },\n    text: {\n      default: null,\n      type: [String, Number]\n    },\n    color: {\n      default: null,\n      type: String\n    },\n    position: {\n      default: 'top',\n      type: String\n    },\n    delay: {\n      default: '0s',\n      type: [Number, String]\n    }\n  },\n  data: function data() {\n    return {\n      cords: {},\n      active: false,\n      widthx: 'auto',\n      positionx: null,\n      noneAfter: false\n    };\n  },\n  computed: {\n    style: function style() {\n      return {\n        left: this.cords.left,\n        top: this.cords.top,\n        transitionDelay: this.active ? this.delay : '0s',\n        background: _color.getColor(this.color, 1),\n        width: this.widthx\n      };\n    }\n  },\n  methods: {\n    mouseenterx: function mouseenterx() {\n      var _this = this;\n\n      this.active = true;\n      this.$nextTick(function () {\n        utils.insertBody(_this.$refs.vstooltip);\n\n        _this.changePosition(_this.$refs.convstooltip, _this.$refs.vstooltip);\n      });\n    },\n    mouseleavex: function mouseleavex() {\n      this.active = false;\n    },\n    changePosition: function changePosition(elxEvent, tooltip) {\n      this.noneAfter = false;\n      this.positionx = null;\n      var elx = elxEvent.closest('.con-vs-tooltip');\n      var scrollTopx = window.pageYOffset || document.documentElement.scrollTop;\n      var topx = elx.getBoundingClientRect().top + scrollTopx - tooltip.clientHeight - 4;\n      var leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 + elx.clientWidth / 2;\n      var widthx = elx.clientWidth;\n\n      if (this.position == 'bottom') {\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4;\n      } else if (this.position == 'left') {\n        leftx = elx.getBoundingClientRect().left - tooltip.clientWidth - 4;\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2;\n\n        if (Math.sign(leftx) == -1) {\n          leftx = elx.getBoundingClientRect().left;\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4;\n          this.positionx = 'bottom';\n          this.noneAfter = true;\n        }\n      } else if (this.position == 'right') {\n        leftx = elx.getBoundingClientRect().left + elx.clientWidth + 4;\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2;\n\n        if (window.innerWidth - (leftx + tooltip.clientWidth) <= 20) {\n          leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 - 10;\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4;\n          this.positionx = 'bottom';\n          this.noneAfter = true;\n        }\n      }\n\n      this.cords = {\n        left: \"\".concat(leftx, \"px\"),\n        top: \"\".concat(topx, \"px\"),\n        width: \"\".concat(widthx, \"px\")\n      };\n    },\n    destroy: function destroy() {\n      var _this2 = this;\n\n      this.active = false;\n      this.$nextTick(function () {\n        if (_this2.active) {\n          utils.removeBody(_this2.$refs.vstooltip);\n        }\n      });\n    }\n  }\n};",null]}