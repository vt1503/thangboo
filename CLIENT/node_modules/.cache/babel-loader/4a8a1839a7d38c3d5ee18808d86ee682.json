{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js??ref--13-0!/Users/tule/Code/winbo.trade/src/store/auth/moduleAuthActions.js","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/store/auth/moduleAuthActions.js","mtime":1571229390000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*=========================================================================================\n  File Name: moduleAuthActions.js\n  Description: Auth Module Actions\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n==========================================================================================*/\nimport jwt from \"../../http/requests/auth/jwt/index.js\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport router from '@/router';\nexport default {\n  loginAttempt: function loginAttempt(_ref, payload) {\n    var dispatch = _ref.dispatch;\n    // New payload for login action\n    var newPayload = {\n      userDetails: payload.userDetails,\n      notify: payload.notify,\n      closeAnimation: payload.closeAnimation\n    }; // If remember_me is enabled change firebase Persistence\n\n    if (!payload.checkbox_remember_me) {\n      // Change firebase Persistence\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION) // If success try to login\n      .then(function () {\n        dispatch('login', newPayload);\n      }) // If error notify\n      .catch(function (err) {\n        // Close animation if passed as payload\n        if (payload.closeAnimation) payload.closeAnimation();\n        payload.notify({\n          time: 2500,\n          title: 'Error',\n          text: err.message,\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'danger'\n        });\n      });\n    } else {\n      // Try to login\n      dispatch('login', newPayload);\n    }\n  },\n  login: function login(_ref2, payload) {\n    var commit = _ref2.commit,\n        state = _ref2.state,\n        dispatch = _ref2.dispatch;\n\n    // If user is already logged in notify and exit\n    if (state.isUserLoggedIn()) {\n      // Close animation if passed as payload\n      if (payload.closeAnimation) payload.closeAnimation();\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    } // Try to sigin\n\n\n    firebase.auth().signInWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password).then(function (result) {\n      // Set FLAG username update required for updating username\n      var isUsernameUpdateRequired = false; // if username is provided and updateUsername FLAG is true\n      // set local username update FLAG to true\n      // try to update username\n\n      if (payload.updateUsername && payload.userDetails.displayName) {\n        isUsernameUpdateRequired = true;\n        dispatch('updateUsername', {\n          user: result.user,\n          username: payload.userDetails.displayName,\n          notify: payload.notify,\n          isReloadRequired: true\n        });\n      } // Close animation if passed as payload\n\n\n      if (payload.closeAnimation) payload.closeAnimation(); // if username update is not required\n      // just reload the page to get fresh data\n      // set new user data in localstorage\n\n      if (!isUsernameUpdateRequired) {\n        router.push(router.currentRoute.query.to || '/');\n        commit('UPDATE_USER_INFO', result.user.providerData[0], {\n          root: true\n        });\n      }\n    }, function (err) {\n      // Close animation if passed as payload\n      if (payload.closeAnimation) payload.closeAnimation();\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Google Login\n  loginWithGoogle: function loginWithGoogle(_ref3, payload) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_USER_INFO', result.user.providerData[0], {\n        root: true\n      });\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Facebook Login\n  loginWithFacebook: function loginWithFacebook(_ref4, payload) {\n    var commit = _ref4.commit,\n        state = _ref4.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.FacebookAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_USER_INFO', result.user.providerData[0], {\n        root: true\n      });\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Twitter Login\n  loginWithTwitter: function loginWithTwitter(_ref5, payload) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.TwitterAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_USER_INFO', result.user.providerData[0], {\n        root: true\n      });\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // Github Login\n  loginWithGithub: function loginWithGithub(_ref6, payload) {\n    var commit = _ref6.commit,\n        state = _ref6.state;\n\n    if (state.isUserLoggedIn()) {\n      payload.notify({\n        title: 'Login Attempt',\n        text: 'You are already logged in!',\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'warning'\n      });\n      return false;\n    }\n\n    var provider = new firebase.auth.GithubAuthProvider();\n    firebase.auth().signInWithPopup(provider).then(function (result) {\n      router.push(router.currentRoute.query.to || '/');\n      commit('UPDATE_USER_INFO', result.user.providerData[0], {\n        root: true\n      });\n    }).catch(function (err) {\n      payload.notify({\n        time: 2500,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  registerUser: function registerUser(_ref7, payload) {\n    var dispatch = _ref7.dispatch;\n    // create user using firebase\n    firebase.auth().createUserWithEmailAndPassword(payload.userDetails.email, payload.userDetails.password).then(function () {\n      payload.notify({\n        title: 'Account Created',\n        text: 'You are successfully registered!',\n        iconPack: 'feather',\n        icon: 'icon-check',\n        color: 'success'\n      });\n      var newPayload = {\n        userDetails: payload.userDetails,\n        notify: payload.notify,\n        updateUsername: true\n      };\n      dispatch('login', newPayload);\n    }, function (error) {\n      payload.notify({\n        title: 'Error',\n        text: error.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  updateUsername: function updateUsername(_ref8, payload) {\n    var commit = _ref8.commit;\n    payload.user.updateProfile({\n      displayName: payload.displayName\n    }).then(function () {\n      // If username update is success\n      // update in localstorage\n      var newUserData = Object.assign({}, payload.user.providerData[0]);\n      newUserData.displayName = payload.displayName;\n      commit('UPDATE_USER_INFO', newUserData, {\n        root: true\n      }); // If reload is required to get fresh data after update\n      // Reload current page\n\n      if (payload.isReloadRequired) {\n        router.push(router.currentRoute.query.to || '/');\n      }\n    }).catch(function (err) {\n      payload.notify({\n        time: 8800,\n        title: 'Error',\n        text: err.message,\n        iconPack: 'feather',\n        icon: 'icon-alert-circle',\n        color: 'danger'\n      });\n    });\n  },\n  // JWT\n  loginJWT: function loginJWT(_ref9, payload) {\n    var commit = _ref9.commit;\n    return new Promise(function (resolve, reject) {\n      jwt.login(payload.userDetails.email, payload.userDetails.password).then(function (response) {\n        // If there's user data in response\n        if (response.data.userData) {\n          // Navigate User to homepage\n          router.push(router.currentRoute.query.to || '/'); // Set accessToken\n\n          localStorage.setItem(\"accessToken\", response.data.accessToken); // Update user details\n\n          commit('UPDATE_USER_INFO', response.data.userData, {\n            root: true\n          }); // Set bearer token in axios\n\n          commit(\"SET_BEARER\", response.data.accessToken);\n          resolve(response);\n        } else {\n          reject({\n            message: \"Wrong Email or Password\"\n          });\n        }\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  registerUserJWT: function registerUserJWT(_ref10, payload) {\n    var commit = _ref10.commit;\n    var _payload$userDetails = payload.userDetails,\n        displayName = _payload$userDetails.displayName,\n        email = _payload$userDetails.email,\n        password = _payload$userDetails.password,\n        confirmPassword = _payload$userDetails.confirmPassword;\n    return new Promise(function (resolve, reject) {\n      // Check confirm password\n      if (password !== confirmPassword) {\n        reject({\n          message: \"Password doesn't match. Please try again.\"\n        });\n      }\n\n      jwt.registerUser(displayName, email, password).then(function (response) {\n        // Redirect User\n        router.push(router.currentRoute.query.to || '/'); // Update data in localStorage\n\n        localStorage.setItem(\"accessToken\", response.data.accessToken);\n        commit('UPDATE_USER_INFO', response.data.userData, {\n          root: true\n        });\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  fetchAccessToken: function fetchAccessToken() {\n    return new Promise(function (resolve) {\n      jwt.refreshToken().then(function (response) {\n        resolve(response);\n      });\n    });\n  }\n};",null]}