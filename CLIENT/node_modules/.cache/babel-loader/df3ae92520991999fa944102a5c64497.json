{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/views/apps/todo/TodoTask.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/views/apps/todo/TodoTask.vue","mtime":1570194316000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      taskLocal: this.$store.getters[\"todo/getTask\"](this.taskId)\n    };\n  },\n  computed: {\n    isCompleted: {\n      get: function get() {\n        return this.taskLocal.isCompleted;\n      },\n      set: function set(value) {\n        var _this = this;\n\n        this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n          isCompleted: value\n        })).then(function (response) {\n          _this.taskLocal.isCompleted = response.data.isCompleted;\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }\n    },\n    todoLabelColor: function todoLabelColor() {\n      var _this2 = this;\n\n      return function (label) {\n        var tags = _this2.$store.state.todo.taskTags;\n        return tags.find(function (tag) {\n          return tag.value == label;\n        }).color;\n      };\n    }\n  },\n  methods: {\n    toggleIsImportant: function toggleIsImportant() {\n      var _this3 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isImportant: !this.taskLocal.isImportant\n      })).then(function (response) {\n        _this3.taskLocal.isImportant = response.data.isImportant;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    toggleIsStarred: function toggleIsStarred() {\n      var _this4 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isStarred: !this.taskLocal.isStarred\n      })).then(function (response) {\n        _this4.taskLocal.isStarred = response.data.isStarred;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    moveToTrash: function moveToTrash() {\n      var _this5 = this;\n\n      this.$store.dispatch(\"todo/updateTask\", Object.assign({}, this.taskLocal, {\n        isTrashed: true\n      })).then(function (response) {\n        // console.log(response.data);\n        _this5.taskLocal.isTrashed = response.data.isTrashed;\n        _this5.$el.style.display = \"none\"; // Hides element from DOM\n      }).catch(function (error) {\n        console.error(error);\n      }); // Un-comment below line if you want to fetch task after task is deleted\n      // this.$store.dispatch(\"todo/fetchTasks\", {filter: this.$route.params.filter})\n    },\n    displayPrompt: function displayPrompt() {\n      this.$emit('showDisplayPrompt', this.taskId);\n    }\n  }\n};",null]}