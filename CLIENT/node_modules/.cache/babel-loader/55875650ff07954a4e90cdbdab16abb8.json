{"remainingRequest":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js!/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js!/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tule/Code/winbo.trade/src/layouts/components/vertical-nav-menu/VerticalNavMenu.vue","mtime":1650685230444},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tule/Code/winbo.trade/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tule/Code/winbo.trade/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _slicedToArray from \"/Users/tule/Code/winbo.trade/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport VNavMenuGroup from \"./VerticalNavMenuGroup.vue\";\nimport VNavMenuItem from \"./VerticalNavMenuItem.vue\";\nimport Logo from \"../Logo.vue\";\nexport default {\n  name: 'v-nav-menu',\n  components: {\n    VNavMenuGroup: VNavMenuGroup,\n    VNavMenuItem: VNavMenuItem,\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    Logo: Logo\n  },\n  props: {\n    logo: {\n      type: String\n    },\n    openGroupHover: {\n      type: Boolean,\n      default: false\n    },\n    parent: {\n      type: String\n    },\n    reduceNotRebound: {\n      type: Boolean,\n      default: true\n    },\n    navMenuItems: {\n      type: Array,\n      required: true\n    },\n    title: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      clickNotClose: false,\n      // disable close navMenu on outside click\n      isMouseEnter: false,\n      reduce: false,\n      // determines if navMenu is reduce - component property\n      showCloseButton: true,\n      // show close button in smaller devices\n      settings: {\n        // perfectScrollbar settings\n        maxScrollbarLength: 60,\n        wheelSpeed: 1,\n        swipeEasing: true\n      },\n      showShadowBottom: false\n    };\n  },\n  computed: {\n    isGroupActive: function isGroupActive() {\n      var _this = this;\n\n      return function (item) {\n        var path = _this.$route.fullPath;\n        var routeParent = _this.$route.meta ? _this.$route.meta.parent : undefined;\n        var open = false;\n\n        var func = function func(item) {\n          if (item.submenu) {\n            item.submenu.forEach(function (item) {\n              if (item.url && (path === item.url || routeParent === item.slug)) {\n                open = true;\n              } else if (item.submenu) {\n                func(item);\n              }\n            });\n          }\n        };\n\n        func(item);\n        return open;\n      };\n    },\n    menuItemsUpdated: function menuItemsUpdated() {\n      var clone = this.navMenuItems.slice();\n\n      var _iterator = _createForOfIteratorHelper(this.navMenuItems.entries()),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              item = _step$value[1];\n\n          if (item.header && item.items.length && (index || 1)) {\n            var i = clone.findIndex(function (ix) {\n              return ix.header === item.header;\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(item.items.entries()),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _step2$value = _slicedToArray(_step2.value, 2),\n                    subIndex = _step2$value[0],\n                    subItem = _step2$value[1];\n\n                clone.splice(i + 1 + subIndex, 0, subItem);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return clone;\n    },\n    isVerticalNavMenuActive: {\n      get: function get() {\n        return this.$store.state.isVerticalNavMenuActive;\n      },\n      set: function set(val) {\n        this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', val);\n      }\n    },\n    layoutType: function layoutType() {\n      return this.$store.state.mainLayoutType;\n    },\n    reduceButton: {\n      get: function get() {\n        return this.$store.state.reduceButton;\n      },\n      set: function set(val) {\n        this.$store.commit('TOGGLE_REDUCE_BUTTON', val);\n      }\n    },\n    isVerticalNavMenuReduced: function isVerticalNavMenuReduced() {\n      return Boolean(this.reduce && this.reduceButton);\n    },\n    verticalNavMenuItemsMin: function verticalNavMenuItemsMin() {\n      return this.$store.state.verticalNavMenuItemsMin;\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  watch: {\n    '$route': function $route() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false);\n    },\n    reduce: function reduce(val) {\n      var verticalNavMenuWidth = val ? \"reduced\" : this.$store.state.windowWidth < 1200 ? \"no-nav-menu\" : \"default\";\n      this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth);\n      setTimeout(function () {\n        window.dispatchEvent(new Event('resize'));\n      }, 100);\n    },\n    layoutType: function layoutType() {\n      this.setVerticalNavMenuWidth();\n    },\n    reduceButton: function reduceButton() {\n      this.setVerticalNavMenuWidth();\n    },\n    windowWidth: function windowWidth() {\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  methods: {\n    // handleWindowResize(event) {\n    //   this.windowWidth = event.currentTarget.innerWidth;\n    //   this.setVerticalNavMenuWidth()\n    // },\n    onSwipeLeft: function onSwipeLeft() {\n      if (this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = false;\n    },\n    onSwipeAreaSwipeRight: function onSwipeAreaSwipeRight() {\n      if (!this.isVerticalNavMenuActive && this.showCloseButton) this.isVerticalNavMenuActive = true;\n    },\n    psSectionScroll: function psSectionScroll() {\n      this.showShadowBottom = this.$refs.verticalNavMenuPs.$el.scrollTop > 0 ? true : false;\n    },\n    mouseEnter: function mouseEnter() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false);\n      this.isMouseEnter = true;\n    },\n    mouseLeave: function mouseLeave() {\n      if (this.reduce) this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', true);\n      this.isMouseEnter = false;\n    },\n    setVerticalNavMenuWidth: function setVerticalNavMenuWidth() {\n      if (this.windowWidth > 1200) {\n        if (this.layoutType === 'vertical') {\n          // Set reduce\n          this.reduce = this.reduceButton ? true : false; // Open NavMenu\n\n          this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true); // Set Menu Items Only Icon Mode\n\n          var verticalNavMenuItemsMin = this.reduceButton && !this.isMouseEnter ? true : false;\n          this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin); // Menu Action buttons\n\n          this.clickNotClose = true;\n          this.showCloseButton = false;\n          var verticalNavMenuWidth = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\";\n          this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth);\n          return;\n        }\n      } // Close NavMenu\n\n\n      this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false); // Reduce button\n\n      if (this.reduceButton) this.reduce = false; // Menu Action buttons\n\n      this.showCloseButton = true;\n      this.clickNotClose = false; // Update NavMenu Width\n\n      this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu'); // Remove Only Icon in Menu\n\n      this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false); // if(this.layoutType === 'vertical' || (this.layoutType === 'horizontal' && this.windowWidth < 1200))\n      // if (this.windowWidth < 1200) {\n      //   // Close NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', false)\n      //   // Reduce button\n      //   if (this.reduceButton) this.reduce = false\n      //   // Menu Action buttons\n      //   this.showCloseButton = true\n      //   this.clickNotClose   = false\n      //   // Update NavMenu Width\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', 'no-nav-menu')\n      //   // Remove Only Icon in Menu\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', false)\n      // } else {\n      //   // Set reduce\n      //   this.reduce = this.reduceButton ? true : false\n      //   // Open NavMenu\n      //   this.$store.commit('TOGGLE_IS_VERTICAL_NAV_MENU_ACTIVE', true)\n      //   // Set Menu Items Only Icon Mode\n      //   const verticalNavMenuItemsMin = (this.reduceButton && !this.isMouseEnter) ? true : false\n      //   this.$store.commit('UPDATE_VERTICAL_NAV_MENU_ITEMS_MIN', verticalNavMenuItemsMin)\n      //   // Menu Action buttons\n      //   this.clickNotClose   = true\n      //   this.showCloseButton = false\n      //   const verticalNavMenuWidth   = this.isVerticalNavMenuReduced ? \"reduced\" : \"default\"\n      //   this.$store.dispatch('updateVerticalNavMenuWidth', verticalNavMenuWidth)\n      // }\n    },\n    toggleReduce: function toggleReduce(val) {\n      this.reduceButton = val;\n      this.setVerticalNavMenuWidth();\n    }\n  },\n  mounted: function mounted() {\n    this.setVerticalNavMenuWidth();\n  }\n};",null]}